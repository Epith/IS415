{
  "hash": "3162008cb5631f61678d752e8a3a67f8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home Exercise 3\"\nauthor: \"Kwee Cheng\"\ndate: \"October 31, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\ncategories: [Take-Home, Code]\n---\n\n\n\n## **Overview and Objectives**\n\nIn this take-home my aim is to evaluate the necessary R packages necessary to perform:\n\n-   Global Measures of Spatial Autocorrelation\n\n-   Local Measures of Spatial Autocorrelation\n\nThis is to be done on the data which is the different types of crimes in Malaysia on the district level which we would layer with income inequality of Malaysia.\n\nThis also serves to prototype the Shiny application UI and choosing the right type of components\n\n## Data\n\n-   **Income Inequality Data:** Household income inequality by district (<https://data.gov.my/data-catalogue/hh_inequality_district>)\n\n-   **Annual Principal Labour Force Statistics by District:** Annual principal labour force statistics including unemployment and participation rates (<https://data.gov.my/data-catalogue/lfs_district>)\n\n-   **Crime Data:** Crime rates by district (<https://data.gov.my/data-catalogue/crime_district>)\n\n-   **Malaysia - Subnational Administrative Boundaries: (**<https://data.humdata.org/dataset/cod-ab-mys?>)\n\n## Packages\n\n-   **sf** provides a standardised way to work with spatial vector data (points, lines, polygons)\n\n-   **spdep** focuses on spatial econometrics and spatial statistics\n\n-   **tmap** create thematic maps\n\n-   **tidyverse** for easy data manipulation and some visualisation\n\n-   **knitr** facilitates the integration of R code and documentation in reproducible research reports\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sfdep, tmap, tidyverse, knitr)\n```\n:::\n\n\n\n## Importing the Data\n\nBefore the UI prototyping can be done let's see what type of data we are dealing with so that we can better plan for the UI components to be used\n\nLet's import the crime dataset\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrime <- read_csv(\"data/aspatial/crime_district.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 19152 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): state, district, category, type\ndbl  (1): crimes\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\nLet's import the income inequality as well\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nincome <- read_csv(\"data/aspatial/hh_inequality.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 318 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): state, district\ndbl  (1): gini\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\nAlso import the annual principal labour force statistics\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlabour <- read_csv(\"data/aspatial/lfs_district.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 560 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): state, district\ndbl  (7): lf, lf_employed, lf_unemployed, lf_outside, p_rate, u_rate, ep_ratio\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncrime\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 19,152 × 6\n   state    district category type           date       crimes\n   <chr>    <chr>    <chr>    <chr>          <date>      <dbl>\n 1 Malaysia All      assault  all            2016-01-01  22327\n 2 Malaysia All      assault  all            2017-01-01  21366\n 3 Malaysia All      assault  all            2018-01-01  16902\n 4 Malaysia All      assault  all            2019-01-01  16489\n 5 Malaysia All      assault  all            2020-01-01  13279\n 6 Malaysia All      assault  all            2021-01-01  11495\n 7 Malaysia All      assault  all            2022-01-01  10348\n 8 Malaysia All      assault  all            2023-01-01  10453\n 9 Malaysia All      assault  causing_injury 2016-01-01   5531\n10 Malaysia All      assault  causing_injury 2017-01-01   5024\n# ℹ 19,142 more rows\n```\n\n\n:::\n:::\n\n\n\nFrom here we can identify some of the variables that we can use, that the user can interact with ***district, category, type, date, crimes***\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nincome\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 318 × 4\n   state district    date        gini\n   <chr> <chr>       <date>     <dbl>\n 1 Johor Batu Pahat  2019-01-01 0.295\n 2 Johor Batu Pahat  2022-01-01 0.338\n 3 Johor Johor Bahru 2019-01-01 0.388\n 4 Johor Johor Bahru 2022-01-01 0.359\n 5 Johor Kluang      2019-01-01 0.333\n 6 Johor Kluang      2022-01-01 0.354\n 7 Johor Kota Tinggi 2019-01-01 0.361\n 8 Johor Kota Tinggi 2022-01-01 0.343\n 9 Johor Kulai       2019-01-01 0.324\n10 Johor Kulai       2022-01-01 0.337\n# ℹ 308 more rows\n```\n\n\n:::\n:::\n\n\n\nLikewise for income we have ***district, date, gini***\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlabour\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 560 × 10\n   state district   date          lf lf_employed lf_unemployed lf_outside p_rate\n   <chr> <chr>      <date>     <dbl>       <dbl>         <dbl>      <dbl>  <dbl>\n 1 Johor Batu Pahat 2019-01-01  214.        210.           3.7       90.4   70.3\n 2 Johor Batu Pahat 2020-01-01  219.        214.           4.7       92.2   70.4\n 3 Johor Batu Pahat 2021-01-01  216         211            5         97.1   69  \n 4 Johor Batu Pahat 2022-01-01  221.        217.           4         94.6   70  \n 5 Johor Johor Bah… 2019-01-01  792.        768.          24.6      294.    73  \n 6 Johor Johor Bah… 2020-01-01  804.        771.          32.5      297.    73  \n 7 Johor Johor Bah… 2021-01-01  806.        772.          34.1      298.    73  \n 8 Johor Johor Bah… 2022-01-01  830.        799           30.5      293.    73.9\n 9 Johor Kluang     2019-01-01  166.        160.           5.6       66.9   71.3\n10 Johor Kluang     2020-01-01  168.        161.           7.1       67.4   71.4\n# ℹ 550 more rows\n# ℹ 2 more variables: u_rate <dbl>, ep_ratio <dbl>\n```\n\n\n:::\n:::\n\n\n\nFor labour we have ***district, date, lf, lf_employed, lf_unemployed, lf_outside, p_rate, u_rate, ep_ration***\n\n## UI Design\n\nFor a shiny application in this course we work with three main components **`headerPanel`**, **`sidebarPanel`**, and **`mainPanel`**.\n\n-   **Header Panel** : This is the topmost part of the UI where we can put a description of the application or have a navbar where you can navigate different pages. Each page leads to other group members work/part in this project\n\n-   **Sidebar Panel**: This panel would mainly consist of the input controls that the user can play around with to change the map output in the **Main Panel.**\n\n-   **Main Panel** : This is the primary area of the application and it typically contains outputs. The main panel displays the output (like maps, plots, tables, etc.) based on the input given in the sidebar panel.\n\n![](images/clipboard-3154485869.png)\n\n### Header Panel\n\nFor this we would like to put **navbarPage()** which shiny provides. This is so as to keep our project organised and it would be easier to navigate through the different pages that we would have\n\n![](images/clipboard-4240030914.png)\n\n### Side Panel\n\nFor this part it would be the input controls and given the potential variables the the data type we have identified: ***district, category, type, date, crimes, gini.***\n\nSome of the potential input controls that could be used are:\n\n![](images/clipboard-3620315000.png){width=\"414\"}\n\n![](images/clipboard-2234524494.png)\n\n![](images/clipboard-2052511263.png){width=\"430\"}\n\n![](images/clipboard-1621641194.png){width=\"401\"}\n\n![](images/clipboard-3092468463.png){width=\"274\"}\n\n![](images/clipboard-2079632102.png)\n\n![](images/clipboard-2775147435.png)\n\nSomething that our side panel that could look like given the variables that we are given:\n\n![](images/clipboard-1116187746.png)\n\n### Main Panel\n\nGiven that I am working with LISA maps and that having a comparison between two maps would be helpful for the user to visualise.\n\n![](images/clipboard-1619717407.png)\n\nThis would also be roughly how our shiny application would look like with the different layouts\n\n## Data Wrangling\n\nLooking at the crime csv file there are rows with \"all\" or \"All\" as the data. This seems to be a summary of the different crimes or summary for the different districts for the different years. So let's remove the them\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexcluded_column <- \"date\"\ncrime <- crime[!apply(crime[, !names(crime) %in% excluded_column] == \"all\", 1, any), ]\ncrime <- crime[!apply(crime[, !names(crime) %in% excluded_column] == \"All\", 1, any), ]\n```\n:::\n\n\n\nLet's also add a column called year to the different csv files, to that it would be easier to split up the data into the different years\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrime <- crime %>%\n              mutate(year = year(date))\n\nincome <- income %>%\n              mutate(year = year(date))\n\nlabour <- labour %>%\n              mutate(year = year(date))\n```\n:::\n\n\n\nLet's load Malaysia shape file and transform the crs into Malaysia\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_sf <- read_sf(dsn = \"data/geospatial/mys_adm_unhcr_20210211_shp\", \n                 layer = \"mys_admbnda_adm2_unhcr_20210211\") %>%\n  st_as_sf(coords =c(\n    \"longitude\", \"latitude\"),\n           crs = 4326) %>%\n  st_transform(crs = 3168)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(msia_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:3168 \n  wkt:\nPROJCRS[\"Kertau (RSO) / RSO Malaya (m)\",\n    BASEGEOGCRS[\"Kertau (RSO)\",\n        DATUM[\"Kertau (RSO)\",\n            ELLIPSOID[\"Everest 1830 (RSO 1969)\",6377295.664,300.8017,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4751]],\n    CONVERSION[\"Rectified Skew Orthomorphic Malaya Grid (metre)\",\n        METHOD[\"Hotine Oblique Mercator (variant A)\",\n            ID[\"EPSG\",9812]],\n        PARAMETER[\"Latitude of projection centre\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8811]],\n        PARAMETER[\"Longitude of projection centre\",102.25,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8812]],\n        PARAMETER[\"Azimuth of initial line\",323.0257905,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8813]],\n        PARAMETER[\"Angle from Rectified to Skew Grid\",323.130102361111,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8814]],\n        PARAMETER[\"Scale factor on initial line\",0.99984,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8815]],\n        PARAMETER[\"False easting\",804670.24,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Malaysia - West Malaysia onshore.\"],\n        BBOX[1.21,99.59,6.72,104.6]],\n    ID[\"EPSG\",3168]]\n```\n\n\n:::\n:::\n\n\n\n### Hole in boundary file\n\nNext check if there are any holes with the boundary file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nu_msia <- st_union(msia_sf)\nplot(u_msia)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n### Missing row\n\nLet's do a check if there are any missing values in the crime data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nna <- crime %>%\n  summarise(na_district = sum(is.na(district)),\n            na_category = sum(is.na(category)),\n            na_type = sum(is.na(type)),\n            na_date = sum(is.na(date)),\n            na_crimes = sum(is.na(crimes))\n            )\nprint(na)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 5\n  na_district na_category na_type na_date na_crimes\n        <int>       <int>   <int>   <int>     <int>\n1           0           0       0       0         0\n```\n\n\n:::\n:::\n\n\n\nLet's also do a check for the income inequality data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nna <- income %>%\n  summarise(na_district = sum(is.na(district)),\n            na_date = sum(is.na(date)),\n            na_gini = sum(is.na(gini))\n            )\nprint(na)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  na_district na_date na_gini\n        <int>   <int>   <int>\n1           0       0       0\n```\n\n\n:::\n:::\n\n\n\nAnd also for the labour data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nna <- labour %>%\n  summarise(na_district = sum(is.na(district)),\n            na_date = sum(is.na(date)),\n            na_lf = sum(is.na(lf)),\n            na_lf_unemployed = sum(is.na(lf_unemployed)),\n            na_u_rate = sum(is.na(u_rate)),\n            )\nprint(na)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 5\n  na_district na_date na_lf na_lf_unemployed na_u_rate\n        <int>   <int> <int>            <int>     <int>\n1           0       0     0                0         0\n```\n\n\n:::\n:::\n\n\n\n### Left Join\n\n#### Mismatch Districts\n\nHaving check everything else, let's check whether is there any issues with ***msia_sf*** and ***crime***\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined_data <- bind_cols(crime = sort(unique(crime$district)), msia_sf = sort(unique(msia_sf$ADM2_EN)))\n\n# Create a new column to compare the values\ncombined_data <- combined_data %>%\n  mutate(same_values = crime == msia_sf) %>% filter(same_values == FALSE)\n\n# View the result\ncombined_data\n```\n:::\n\n\n\nThis would generate an error regarding difference in the number of data, in the ***crime*** there are 159 districts while in ***msia_sf*** there are 144 districts.\n\nLet's run another code to see the difference\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrime_unique <- data.frame(district = sort(unique(crime$district)))\nmsia_unique <- data.frame(ADM2_EN = sort(unique(msia_sf$ADM2_EN)))\n\n# Find rows in crime_unique that don't have a match in msia_unique\nunmatched_crime <- anti_join(crime_unique, msia_unique, by = c(\"district\" = \"ADM2_EN\"))\n\n# Find rows in msia_unique that don't have a match in crime_unique\nunmatched_msia <- anti_join(msia_unique, crime_unique, by = c(\"ADM2_EN\" = \"district\"))\n\n# Combine results to see all mismatches\n\nunmatched_crime\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 district\n1             Ampang Jaya\n2                    Arau\n3            Bandar Bharu\n4              Batu Gajah\n5             Brickfields\n6        Cameron Highland\n7                  Cheras\n8              Dang Wangi\n9                   Gerik\n10          Hulu Selangor\n11                   Ipoh\n12        Iskandar Puteri\n13    Johor Bahru Selatan\n14      Johor Bahru Utara\n15                 Kajang\n16                 Kangar\n17          Klang Selatan\n18            Klang Utara\n19      Kota Kinabatangan\n20         Kota Samarahan\n21            Kuala Lipis\n22                Manjung\n23              Matu Daro\n24                  Nilai\n25               Nusajaya\n26           Padang Besar\n27                Padawan\n28         Pengkalan Hulu\n29          Petaling Jaya\n30 Seberang Perai Selatan\n31  Seberang Perai Tengah\n32   Seberang Perai Utara\n33                 Selama\n34                 Sentul\n35                Serdang\n36              Seri Alam\n37              Sg. Buloh\n38              Shah Alam\n39            Subang Jaya\n40           Sungai Buloh\n41           Sungai Siput\n42                Taiping\n43          Tanjong Malim\n44                  Tapah\n45            Wangsa Maju\n```\n\n\n:::\n\n```{.r .cell-code}\nunmatched_msia\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             ADM2_EN\n1            Asajaya\n2      Batang Padang\n3               Daro\n4        Johor Bahru\n5       Kinabatangan\n6              Kinta\n7              Klang\n8        Kuala Penyu\n9   Larut Dan Matang\n10             Lipis\n11 Manjung (Dinding)\n12              Matu\n13           Nabawan\n14             Pakan\n15            Perlis\n16          Petaling\n17             Pitas\n18        Pokok Sena\n19           Putatan\n20       S.P. Tengah\n21        S.P. Utara\n22       S.P.Selatan\n23         Samarahan\n24          Selangau\n25          Tambunan\n26            Tongod\n27        Ulu Langat\n28         Ulu Perak\n29      Ulu Selangor\n30  WP. Kuala Lumpur\n```\n\n\n:::\n:::\n\n\n\nFrom here we can actually see which data is missing in which file\n\nLet's see all the unique districts in the sf file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort(unique(msia_sf$ADM2_EN))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"Alor Gajah\"        \"Asajaya\"           \"Bachok\"           \n  [4] \"Baling\"            \"Bandar Baharu\"     \"Barat Daya\"       \n  [7] \"Batang Padang\"     \"Batu Pahat\"        \"Bau\"              \n [10] \"Beaufort\"          \"Belaga\"            \"Beluran\"          \n [13] \"Bentong\"           \"Bera\"              \"Besut\"            \n [16] \"Betong\"            \"Bintulu\"           \"Cameron Highlands\"\n [19] \"Dalat\"             \"Daro\"              \"Dungun\"           \n [22] \"Gombak\"            \"Gua Musang\"        \"Hilir Perak\"      \n [25] \"Hulu Terengganu\"   \"Jasin\"             \"Jelebu\"           \n [28] \"Jeli\"              \"Jempol\"            \"Jerantut\"         \n [31] \"Johor Bahru\"       \"Julau\"             \"Kampar\"           \n [34] \"Kanowit\"           \"Kapit\"             \"Kemaman\"          \n [37] \"Keningau\"          \"Kerian\"            \"Kinabatangan\"     \n [40] \"Kinta\"             \"Klang\"             \"Kluang\"           \n [43] \"Kota Belud\"        \"Kota Bharu\"        \"Kota Kinabalu\"    \n [46] \"Kota Marudu\"       \"Kota Setar\"        \"Kota Tinggi\"      \n [49] \"Kuala Kangsar\"     \"Kuala Krai\"        \"Kuala Langat\"     \n [52] \"Kuala Muda\"        \"Kuala Penyu\"       \"Kuala Pilah\"      \n [55] \"Kuala Selangor\"    \"Kuala Terengganu\"  \"Kuantan\"          \n [58] \"Kubang Pasu\"       \"Kuching\"           \"Kudat\"            \n [61] \"Kulaijaya\"         \"Kulim\"             \"Kunak\"            \n [64] \"Lahad Datu\"        \"Langkawi\"          \"Larut Dan Matang\" \n [67] \"Lawas\"             \"Ledang\"            \"Limbang\"          \n [70] \"Lipis\"             \"Lubok Antu\"        \"Lundu\"            \n [73] \"Machang\"           \"Manjung (Dinding)\" \"Maran\"            \n [76] \"Marang\"            \"Marudi\"            \"Matu\"             \n [79] \"Melaka Tengah\"     \"Meradong\"          \"Mersing\"          \n [82] \"Miri\"              \"Muar\"              \"Mukah\"            \n [85] \"Nabawan\"           \"Padang Terap\"      \"Pakan\"            \n [88] \"Papar\"             \"Pasir Mas\"         \"Pasir Puteh\"      \n [91] \"Pekan\"             \"Penampang\"         \"Pendang\"          \n [94] \"Perak Tengah\"      \"Perlis\"            \"Petaling\"         \n [97] \"Pitas\"             \"Pokok Sena\"        \"Pontian\"          \n[100] \"Port Dickson\"      \"Putatan\"           \"Ranau\"            \n[103] \"Raub\"              \"Rembau\"            \"Rompin\"           \n[106] \"S.P. Tengah\"       \"S.P. Utara\"        \"S.P.Selatan\"      \n[109] \"Sabak Bernam\"      \"Samarahan\"         \"Sandakan\"         \n[112] \"Saratok\"           \"Sarikei\"           \"Segamat\"          \n[115] \"Selangau\"          \"Semporna\"          \"Sepang\"           \n[118] \"Seremban\"          \"Serian\"            \"Setiu\"            \n[121] \"Sibu\"              \"Sik\"               \"Simunjan\"         \n[124] \"Sipitang\"          \"Song\"              \"Sri Aman\"         \n[127] \"Tambunan\"          \"Tampin\"            \"Tanah Merah\"      \n[130] \"Tatau\"             \"Tawau\"             \"Temerloh\"         \n[133] \"Tenom\"             \"Timur Laut\"        \"Tongod\"           \n[136] \"Tuaran\"            \"Tumpat\"            \"Ulu Langat\"       \n[139] \"Ulu Perak\"         \"Ulu Selangor\"      \"W.P. Labuan\"      \n[142] \"W.P. Putrajaya\"    \"WP. Kuala Lumpur\"  \"Yan\"              \n```\n\n\n:::\n:::\n\n\n\nFrom here there is no easy way to fix this but to google the districts mentioned in crime and try to map it as close as close to the district in the sf file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrime <- crime %>%\n  mutate(district = recode(district,\n                           # Johor Bahru mappings\n                           \"Iskandar Puteri\" = \"Johor Bahru\",\n                           \"Nusajaya\" = \"Johor Bahru\",\n                           \"Johor Bahru Selatan\" = \"Johor Bahru\",\n                           \"Johor Bahru Utara\" = \"Johor Bahru\",\n                           \"Seri Alam\" = \"Johor Bahru\",\n                           \n                           # Bandar Baharu correction\n                           \"Bandar Bharu\" = \"Bandar Baharu\",\n                           \n                           # WP Kuala Lumpur mappings\n                           \"Brickfields\" = \"WP. Kuala Lumpur\",\n                           \"Cheras\" = \"WP. Kuala Lumpur\",\n                           \"Dang Wangi\" = \"WP. Kuala Lumpur\",\n                           \"Sentul\" = \"WP. Kuala Lumpur\",\n                           \"Wangsa Maju\" = \"WP. Kuala Lumpur\",\n                           \n                           # Seremban correction\n                           \"Nilai\" = \"Seremban\",\n                           \n                           # Seberang Perai corrections\n                           \"Seberang Perai Selatan\" = \"S.P.Selatan\",\n                           \"Seberang Perai Tengah\" = \"S.P. Tengah\",\n                           \"Seberang Perai Utara\" = \"S.P. Utara\",\n                           \n                           # Cameron Highlands correction\n                           \"Cameron Highland\" = \"Cameron Highlands\",\n                           \n                           # Lipis correction\n                           \"Kuala Lipis\" = \"Lipis\",\n                           \n                           # Kinta mappings\n                           \"Batu Gajah\" = \"Kinta\",\n                           \"Ipoh\" = \"Kinta\",\n                           \n                           # Ulu Perak mappings\n                           \"Gerik\" = \"Ulu Perak\",\n                           \"Pengkalan Hulu\" = \"Ulu Perak\",\n      \n                           \n                           # Manjung correction\n                           \"Manjung\" = \"Manjung (Dinding)\",\n                           \n                           # Larut Dan Matang mappings\n                           \"Selama\" = \"Larut Dan Matang\",\n                           \"Taiping\" = \"Larut Dan Matang\",\n                           \n                           # Kuala Kangsar correction\n                           \"Sungai Siput\" = \"Kuala Kangsar\",\n                           \n                           # Batang Padang mappings\n                           \"Tanjong Malim\" = \"Batang Padang\",\n                           \"Tapah\" = \"Batang Padang\",\n                           \n                           # Perlis mappings\n                           \"Arau\" = \"Perlis\",\n                           \"Kangar\" = \"Perlis\",\n                           \"Padang Besar\" = \"Perlis\",\n                           \n                           # Kinabatangan correction\n                           \"Kota Kinabatangan\" = \"Kinabatangan\",\n                           \n                           # Samarahan correction\n                           \"Kota Samarahan\" = \"Samarahan\",\n                           \n                           # Mukah correction\n                           \"Matu Daro\" = \"Mukah\",\n                           \n                           # Kuching correction\n                           \"Padawan\" = \"Kuching\",\n                           \n                           # Gombak correction\n                           \"Ampang Jaya\" = \"Gombak\",\n                           \n                           # Ulu Langat correction\n                           \"Kajang\" = \"Ulu Langat\",\n                           \n                           # Ulu Selangor correction\n                           \"Hulu Selangor\" = \"Ulu Selangor\",\n                           \n                           # Klang mappings\n                           \"Klang Selatan\" = \"Klang\",\n                           \"Klang Utara\" = \"Klang\",\n                           \n                           # Petaling mappings\n                           \"Petaling Jaya\" = \"Petaling\",\n                           \"Serdang\" = \"Petaling\",\n                           \"Sg. Buloh\" = \"Petaling\",\n                           \"Shah Alam\" = \"Petaling\",\n                           \"Subang Jaya\" = \"Petaling\",\n                           \"Sungai Buloh\" = \"Petaling\",\n                           \n                           # Default to keep original name if no match\n                           .default = district))\n```\n:::\n\n\n\nlet's check again to see if altered the data correctly\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrime_unique <- data.frame(district = sort(unique(crime$district)))\n\n# Find rows in crime_unique that don't have a match in msia_unique\nunmatched_crime <- anti_join(crime_unique, msia_unique, by = c(\"district\" = \"ADM2_EN\"))\n\nunmatched_crime\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] district\n<0 rows> (or 0-length row.names)\n```\n\n\n:::\n:::\n\n\n\nAs we plan to overlay with the labour data, let's do checks for that as well\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlabour_unique <- data.frame(district = sort(unique(labour$district)))\nmsia_unique <- data.frame(ADM2_EN = sort(unique(msia_sf$ADM2_EN)))\n\n# Find rows in crime_unique that don't have a match in msia_unique\nunmatched_labour <- anti_join(labour_unique, msia_unique, by = c(\"district\" = \"ADM2_EN\"))\n\n# Find rows in msia_unique that don't have a match in crime_unique\nunmatched_msia <- anti_join(msia_unique, labour_unique, by = c(\"ADM2_EN\" = \"district\"))\n\n# Combine results to see all mismatches\n\nunmatched_labour\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                district\n1             Hulu Perak\n2                  Kulai\n3                Manjung\n4               Maradong\n5 Seberang Perai Selatan\n6  Seberang Perai Tengah\n7   Seberang Perai Utara\n8                Tangkak\n```\n\n\n:::\n\n```{.r .cell-code}\nunmatched_msia\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             ADM2_EN\n1          Kulaijaya\n2             Ledang\n3  Manjung (Dinding)\n4           Meradong\n5             Perlis\n6        S.P. Tengah\n7         S.P. Utara\n8        S.P.Selatan\n9          Ulu Perak\n10       W.P. Labuan\n11    W.P. Putrajaya\n12  WP. Kuala Lumpur\n```\n\n\n:::\n:::\n\n\n\nLet's change the districts in *labour* like what we did for *crime*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlabour <- labour %>%\n  mutate(district = recode(district,\n                           \"Kulai\" = \"Kulaijaya\",\n                           # Seberang Perai corrections\n                           \"Seberang Perai Selatan\" = \"S.P.Selatan\",\n                           \"Seberang Perai Tengah\" = \"S.P. Tengah\",\n                           \"Seberang Perai Utara\" = \"S.P. Utara\",\n                           \n                           # Ulu Perak mappings\n                           \"Hulu Perak\" = \"Ulu Perak\",\n                           \n                           # Manjung correction\n                           \"Manjung\" = \"Manjung (Dinding)\",\n                           \n                           \"Maradong\" = \"Meradong\",\n                           \"Tangkak\" = \"Ledang\",\n                           \n                           # Default to keep original name if no match\n                           .default = district))\n```\n:::\n\n\n\nLet's check if there are still any issues with the district for *labour*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlabour_unique <- data.frame(district = sort(unique(labour$district)))\nmsia_unique <- data.frame(ADM2_EN = sort(unique(msia_sf$ADM2_EN)))\n\n# Find rows in crime_unique that don't have a match in msia_unique\nunmatched_labour <- anti_join(labour_unique, msia_unique, by = c(\"district\" = \"ADM2_EN\"))\n\nunmatched_labour\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] district\n<0 rows> (or 0-length row.names)\n```\n\n\n:::\n:::\n\n\n\nLet's combine our labour data with our crimes data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrime_labour <- crime %>%\n        filter(year >= 2019 & year <= 2022) %>%\n        left_join(labour, by = c(\"district\",\"year\")) %>%\n        select(1:4,6,7,10,12,15)\n```\n:::\n\n\n\nLet's check for any empty rows before *left_join*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nna <- crime_labour %>%\n  summarise(na_district = sum(is.na(district)),\n            na_category = sum(is.na(category)),\n            na_type = sum(is.na(type)),\n            na_crimes = sum(is.na(crimes)),\n            na_year = sum(is.na(year)),\n            na_lf = sum(is.na(lf)),\n            na_lf_unemployed = sum(is.na(lf_unemployed)),\n            na_u_rate = sum(is.na(u_rate)),\n            )\nprint(na)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 8\n  na_district na_category na_type na_crimes na_year na_lf na_lf_unemployed\n        <int>       <int>   <int>     <int>   <int> <int>            <int>\n1           0           0       0         0       0   480              480\n# ℹ 1 more variable: na_u_rate <int>\n```\n\n\n:::\n:::\n\n\n\nThere are NA values so let's remove them\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrime_labour <- na.omit(crime_labour)\n```\n:::\n\n\n\nDo another check\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nna <- crime_labour %>%\n  summarise(na_district = sum(is.na(district)),\n            na_category = sum(is.na(category)),\n            na_type = sum(is.na(type)),\n            na_crimes = sum(is.na(crimes)),\n            na_year = sum(is.na(year)),\n            na_lf = sum(is.na(lf)),\n            na_lf_unemployed = sum(is.na(lf_unemployed)),\n            na_u_rate = sum(is.na(u_rate)),\n            )\nprint(na)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 8\n  na_district na_category na_type na_crimes na_year na_lf na_lf_unemployed\n        <int>       <int>   <int>     <int>   <int> <int>            <int>\n1           0           0       0         0       0     0                0\n# ℹ 1 more variable: na_u_rate <int>\n```\n\n\n:::\n:::\n\n\n\nFinally with combine it with our *msia_sf*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia <- left_join(msia_sf,crime_labour, by = c(\"ADM2_EN\" = \"district\")) %>%\n        select(1,6,16:23)\n\nmsia\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 7024 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 184853.1 ymin: 94420.8 xmax: 2380932 ymax: 829136\nProjected CRS: Kertau (RSO) / RSO Malaya (m)\n# A tibble: 7,024 × 11\n   ADM2_EN    ADM1_EN state.x category type     crimes  year    lf lf_unemployed\n   <chr>      <chr>   <chr>   <chr>    <chr>     <dbl> <dbl> <dbl>         <dbl>\n 1 Batu Pahat Johor   Johor   assault  causing…     41  2019  214.           3.7\n 2 Batu Pahat Johor   Johor   assault  causing…     43  2020  219.           4.7\n 3 Batu Pahat Johor   Johor   assault  causing…     22  2021  216            5  \n 4 Batu Pahat Johor   Johor   assault  causing…     19  2022  221.           4  \n 5 Batu Pahat Johor   Johor   assault  murder        3  2019  214.           3.7\n 6 Batu Pahat Johor   Johor   assault  murder        3  2020  219.           4.7\n 7 Batu Pahat Johor   Johor   assault  murder        0  2021  216            5  \n 8 Batu Pahat Johor   Johor   assault  murder        3  2022  221.           4  \n 9 Batu Pahat Johor   Johor   assault  rape         29  2019  214.           3.7\n10 Batu Pahat Johor   Johor   assault  rape         16  2020  219.           4.7\n# ℹ 7,014 more rows\n# ℹ 2 more variables: u_rate <dbl>, geometry <MULTIPOLYGON [m]>\n```\n\n\n:::\n:::\n\n\n\nLooking at this we could see some additional rows have been added. Let's see if there are any NA values\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nna <- msia %>%\n  summarise(na_district = sum(is.na(ADM2_EN)),\n            na_category = sum(is.na(category)),\n            na_type = sum(is.na(type)),\n            na_crimes = sum(is.na(crimes)),\n            na_year = sum(is.na(year)),\n            na_lf = sum(is.na(lf)),\n            na_lf_unemployed = sum(is.na(lf_unemployed)),\n            na_u_rate = sum(is.na(u_rate)),\n            )\nprint(na)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 184853.1 ymin: 94420.8 xmax: 2380932 ymax: 829136\nProjected CRS: Kertau (RSO) / RSO Malaya (m)\n# A tibble: 1 × 9\n  na_district na_category na_type na_crimes na_year na_lf na_lf_unemployed\n        <int>       <int>   <int>     <int>   <int> <int>            <int>\n1           0          16      16        16      16    16               16\n# ℹ 2 more variables: na_u_rate <int>, geometry <MULTIPOLYGON [m]>\n```\n\n\n:::\n:::\n\n\n\nLet's remove the NA rows\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia <- na.omit(msia)\n```\n:::\n\n\n\nDo another check\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nna <- msia %>%\n  summarise(na_district = sum(is.na(ADM2_EN)),\n            na_category = sum(is.na(category)),\n            na_type = sum(is.na(type)),\n            na_crimes = sum(is.na(crimes)),\n            na_year = sum(is.na(year)),\n            na_lf = sum(is.na(lf)),\n            na_lf_unemployed = sum(is.na(lf_unemployed)),\n            na_u_rate = sum(is.na(u_rate)),\n            )\nprint(na)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 184853.1 ymin: 94420.8 xmax: 2380932 ymax: 829136\nProjected CRS: Kertau (RSO) / RSO Malaya (m)\n# A tibble: 1 × 9\n  na_district na_category na_type na_crimes na_year na_lf na_lf_unemployed\n        <int>       <int>   <int>     <int>   <int> <int>            <int>\n1           0           0       0         0       0     0                0\n# ℹ 2 more variables: na_u_rate <int>, geometry <MULTIPOLYGON [m]>\n```\n\n\n:::\n:::\n\n\n\n## **Global Measures of Spatial Autocorrelation**\n\n### **Calculating Neighbours and Weights**\n\nI would be defining neighbour's based on Queens contiguity, and also let's assign spatial weights to each neighbouring polygon\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_nb_q <- st_contiguity(msia, queen=TRUE)\n```\n:::\n\n\n\nAs this takes time let's write it to a rds file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(msia_nb_q, \"data/rds/msia_nb_q.rds\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### **Computing Row-Standardised Weight Matrix**\n\nNext, we need to assign spatial weights to each neighboring polygon.\n\n[`st_weights()`](https://rdrr.io/cran/sfdep/man/st_weights.html) function from `sfdep` pacakge can be used to supplement a neighbour list with spatial weights\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_wm_rs <- st_weights(msia_nb_q, style=\"W\")\n```\n:::\n\n\n\nWe will mutate the newly created neighbour list object `msia_nb_q` and weight matrix `msia_wm_rs` into our existing `msia`. The result will be a new object, which we will call `wm_q`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- msia %>%\n  mutate(nb = msia_nb_q,\n         wt = msia_wm_rs,\n         .before = 1) \n```\n:::\n\n\n\n### **Global Moran’s I Test**\n\nTo assess spatial autocorrelation in our dataset, or how the presence of crimes in a district may form clusters.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_q$crimes,\n                  wm_q$nb,\n                  wm_q$wt,\n                  zero.policy = TRUE,\n                  na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 118.83, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     1.240600e-01     -1.427144e-04      1.092536e-06 \n```\n\n\n:::\n:::\n\n\n\nFrom the test, the positive moran’s I statistic suggests that there is clustering, or a degree of spatial autocorrelation. This might be expected as when committing a crime, you might run to a neighbouring area. To commit another crime so as to be harder to track.\n\nWe can also see that the P-value is small. From a frequentist approach, we can see that this is unlikely to have occured by chance.\n\nTo strengthen our findings, we run a monte-carlo simulation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2932)\n```\n:::\n\n\n\n### **Global Moran’s** I permutation test\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q$crimes,\n           wm_q$nb,\n           wm_q$wt,\n           zero.policy = TRUE,\n           nsim = 999,\n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.12406, observed rank = 1000, p-value < 2.2e-16\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\n\nFrom the outputs above, we can observe that the Moran’s I statistic (after 1000 permutations) for the **0.12406** with a p-value \\< **2.2e-16** which is similar to our previous result with low p-value which suggest that it did not happen randomly.\n\n## Local Moran I\n\nLocal Indicators of Spatial Association, or LISA, let us evaluate clusters between districts. Where higher values denote that the region is more heavily influenced by its surroundings.\n\n### Calculating Local Moran I\n\nCalculating local Moran’s I statistics and append the results to the original dataframe as new columns.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- wm_q %>%\n          mutate(local_moran = local_moran(\n            crimes, nb, wt, nsim = 999, zero.policy=TRUE),\n                 .before = 1) %>%\n          unnest(local_moran)\n```\n:::\n\n\n\n### Visualising Local Moran I\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa <- wm_q\nmap1 <- tm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of No of crimes\",\n            main.title.size = 0.8)\n\nmap2 <- tm_shape(lisa) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n\n### LISA\n\nThe local indicator of spatial association (LISA) for each observation gives an indication of the extent of significant spatial clustering of similar values around that observation. LISA map is a categorical map showing type of outliers and clusters. There are two types of outliers namely: **High-Low** and **Low-High** outliers. Likewise, there are two type of clusters namely: **High-High** and **Low-Low** cluaters.\n\n-   **High-Low Outliers:** Provinces with a high value of crimes, surrounded by neighbouring districts with low values of crimes.\n\n-   **Low-High Outliers**: Provinces with a low value of crimes, surrounded by neighbouring districts with high values of crimes.\n\n-   **High-High Clusters**: Provinces with a high value of crimes, surrounded by neighbouring districts with high values of crimes.\n\n-   **Low-Low Clusters**: Provinces with a low value of crimes, surrounded by neighbouring districts with low values of crimes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig <- lisa %>% filter(p_ii_sim < 0.05)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(lisa) +\n  tm_polygons() + \n  tm_borders(alpha = 0.5) + \n  tm_shape(lisa_sig) + \n  tm_fill(\"mean\", title = \"LISA class\") +\n  tm_borders(alpha = 0.4) +\n  tm_layout(main.title = \"LISA map of crimes\", main.title.size = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Take-home_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}