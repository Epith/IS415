{
  "hash": "539ae429dfea789c031d77e7d1db51f8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home Exercise 2\"\nauthor: \"Kwee Cheng\"\ndate: \"September 25, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\ncategories: [Take-Home, Code]\n---\n\n\n\n## Background\n\nDrug abuse is associated with significant negative health, financial and social consequences. Yet, illicit drug consumption remains highly prevalent and continues to be a growing problem worldwide. In 2021, 1 in 17 people aged 15–64 in the world had used a drug in the past 12 months. Notwithstanding population growth, the estimated number of drug users grew from 240 million in 2011 to 296 million in 2021.\n\nThe geopolitics of Thailand which is near the [Golden Triangle](https://en.wikipedia.org/wiki/Golden_Triangle_(Southeast_Asia)) of Indochina, the largest drug production site in Asia, and the constant transportation infrastructure development made Thailand became market and transit routes for drug trafficking to the third countries.\n\nIn Thailand, drug abuse is one of the major social issue. There are about 2.7 million youths using drugs in Thailand. Among youths aged between 15 and 19 years, there are about 300,000 who have needs for drug treatment. Most of Thai youths involved with drugs are vocational-school students, which nearly doubles in number compared to secondary-school students.\n\n## Objectives\n\n-   If the key indicators of drug abuse of Thailand are independent from space.\n\n-   If the indicators of drug abuse is indeed spatial dependent, then, you would like to detect where are the clusters and outliers, and the hotspots.\n\n-   Last but not least, you are also interested to investigate how the observation above evolve over time.\n\n## Dataset\n\n-   [Thailand Drug Offenses \\[2017-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-drug-offenses-2017-2022) at Kaggle.\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) at HDX. You are required to use the province boundary data set.\n\n## Packages\n\n-   **sf** provides a standardised way to work with spatial vector data (points, lines, polygons)\n\n-   **spdep** focuses on spatial econometrics and spatial statistics\n\n-   **tmap** create thematic maps\n\n-   **tidyverse** for easy data manipulation and some visualisation\n\n-   **knitr** facilitates the integration of R code and documentation in reproducible research reports\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n```\n:::\n\n\n\n## **Importing data**\n\nLet's load the csv file from kaggle about Thailand's drug offenses\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_drug <- read_csv(\"data/thai_drug_offenses_2017_2022.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 7392 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(thai_drug)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n```\n\n\n:::\n:::\n\n\n\nNext let's load the shapefile of Thailand's province boundary\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_sf <- st_read(dsn = \"data/\", \n                 layer = \"tha_admbnda_adm1_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\SMU\\Y4S1\\IS415\\IS415\\Take-home_Ex\\Take-home_Ex02\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   Shape_Leng Shape_Area                  ADM1_EN       ADM1_TH ADM1_PCODE\n1    2.417227 0.13133873                  Bangkok  กรุงเทพมหานคร       TH10\n2    1.695100 0.07926199             Samut Prakan    สมุทรปราการ       TH11\n3    1.251111 0.05323766               Nonthaburi         นนทบุรี       TH12\n4    1.884945 0.12698345             Pathum Thani        ปทุมธานี       TH13\n5    3.041716 0.21393797 Phra Nakhon Si Ayutthaya พระนครศรีอยุธยา       TH14\n6    1.739908 0.07920961                Ang Thong        อ่างทอง       TH15\n7    5.693342 0.54578838                 Lop Buri          ลพบุรี       TH16\n8    1.778326 0.06872655                Sing Buri         สิงห์บุรี       TH17\n9    2.896316 0.20907828                 Chai Nat         ชัยนาท       TH18\n10   4.766446 0.29208711                 Saraburi         สระบุรี       TH19\n   ADM1_REF ADM1ALT1EN ADM1ALT2EN ADM1ALT1TH ADM1ALT2TH  ADM0_EN   ADM0_TH\n1      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n2      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n3      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n4      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n5      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n6      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n7      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n8      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n9      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n10     <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n   ADM0_PCODE       date    validOn    validTo                       geometry\n1          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((100.6139 13...\n2          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((100.7306 13...\n3          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((100.3415 14...\n4          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((100.8916 14...\n5          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((100.5131 14...\n6          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((100.3332 14...\n7          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((101.3453 15...\n8          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((100.3691 15...\n9          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((100.1199 15...\n10         TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((101.3994 15...\n```\n\n\n:::\n:::\n\n\n\n## Data Wrangling\n\n### Misspelled province\n\nI would like to perform a left join on province_en of *thai_drug* and ADM1_EN of *thai_sf*, so I would have to check if there are any missing data or mismatch\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined_data <- bind_cols(thai_drug = sort(unique(thai_drug$province_en)), thai_sf = sort(unique(thai_sf$ADM1_EN)))\n\n# Create a new column to compare the values\ncombined_data <- combined_data %>%\n  mutate(same_values = thai_drug == thai_sf) %>% filter(same_values == FALSE)\n\n# View the result\ncombined_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  thai_drug thai_sf   same_values\n  <chr>     <chr>     <lgl>      \n1 buogkan   Bueng Kan FALSE      \n2 Loburi    Loei      FALSE      \n3 Loei      Lop Buri  FALSE      \n```\n\n\n:::\n:::\n\n\n\nFrom here we can see that there is a mismatch in the data where there are spelling errors from the data provided kaggle so lets change it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_drug <- thai_drug %>%\n  mutate(province_en = recode(province_en,\n                              \"buogkan\" = \"Bueng Kan\",\n                              \"Loburi\" = \"Lop Buri\"))\n```\n:::\n\n\n\nLet's check if there is any mismatch again\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined_data <- bind_cols(thai_drug = sort(unique(thai_drug$province_en)), thai_sf = sort(unique(thai_sf$ADM1_EN)))\n\n\ncombined_data <- combined_data %>%\n  mutate(same_values = thai_drug == thai_sf) %>% filter(same_values == FALSE)\n\n\ncombined_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 3\n# ℹ 3 variables: thai_drug <chr>, thai_sf <chr>, same_values <lgl>\n```\n\n\n:::\n:::\n\n\n\n### CRS check\n\nLet's check the crs of the Thai boundary file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(thai_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\n\nLet's convert it into the projected coordinate system of 32647\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_sf <- thai_sf %>% st_transform(crs = 32647)\nst_crs(thai_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\n\n### Hole in boundary file\n\nNext check is there any holes with the boundary file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nu_thai <- st_union(thai_sf)\nplot(u_thai)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n### Missing row check\n\nLastly check for the drug abuse csv if there are any missing rows\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nna <- thai_drug %>%\n  summarise(na_year = sum(is.na(fiscal_year)),\n            na_province = sum(is.na(province_en)),\n            na_drug_offense = sum(is.na(types_of_drug_offenses)),\n            na_cases = sum(is.na(no_cases)))\nprint(na)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  na_year na_province na_drug_offense na_cases\n    <int>       <int>           <int>    <int>\n1       0           0               0        0\n```\n\n\n:::\n:::\n\n\n\n### Left Join\n\nGreat now let's left join both the boundary file and the csv\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai <- left_join(thai_sf,thai_drug, by = c(\"ADM1_EN\" = \"province_en\")) %>%\n        select(1:3, 17:19,21)\n```\n:::\n\n\n\nAs the combined file is quite huge let's see how we can split it even more, let's choose the only relevant type of drug offenses\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(thai$types_of_drug_offenses)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"drug_use_cases\"                                        \n [2] \"suspects_in_drug_use_cases\"                            \n [3] \"possession_cases\"                                      \n [4] \"suspects_in_possession_cases\"                          \n [5] \"possession_with_intent_to_distribute_cases\"            \n [6] \"suspects_in_possession_with_intent_to_distribute_cases\"\n [7] \"trafficking_cases\"                                     \n [8] \"suspects_in_trafficking_cases\"                         \n [9] \"production_cases\"                                      \n[10] \"suspects_in_production_cases\"                          \n[11] \"import_cases\"                                          \n[12] \"suspects_in_import_cases\"                              \n[13] \"export_cases\"                                          \n[14] \"suspects_in_export_cases\"                              \n[15] \"conspiracy_cases\"                                      \n[16] \"suspects_in_conspiracy_cases\"                          \n```\n\n\n:::\n:::\n\n\n\nThe relevant ones would be the first two *drug_use_cases* and *suspects_in_drug_use_cases* however I am only choosing *drug_use_cases* here as it is a confirmed unlike suspects\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai <- thai %>% filter(types_of_drug_offenses == \"drug_use_cases\")\n```\n:::\n\n\n\nNext let's split it up by the years\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug <- list()\nfor (year in 2017:2022) {\n  drug[[as.character(year)]] <- thai %>% filter(fiscal_year == year)\n}\n\nglimpse(drug[[\"2017\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 77\nColumns: 7\n$ Shape_Leng             <dbl> 2.417227, 1.695100, 1.251111, 1.884945, 3.04171…\n$ Shape_Area             <dbl> 0.13133873, 0.07926199, 0.05323766, 0.12698345,…\n$ ADM1_EN                <chr> \"Bangkok\", \"Samut Prakan\", \"Nonthaburi\", \"Pathu…\n$ fiscal_year            <dbl> 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017,…\n$ types_of_drug_offenses <chr> \"drug_use_cases\", \"drug_use_cases\", \"drug_use_c…\n$ no_cases               <dbl> 11871, 820, 553, 450, 378, 208, 727, 127, 200, …\n$ geometry               <MULTIPOLYGON [m]> MULTIPOLYGON (((674339.8 15..., MU…\n```\n\n\n:::\n:::\n\n\n\n### Simple Visualisations\n\nLet's just do a simple visualisation of the drug uses in the year 2017 to see what we are dealing with\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqtm(drug[[\"2017\"]], \"no_cases\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.62, 0.58. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n## **Global Measures of Spatial Autocorrelation**\n",
    "supporting": [
      "Take-home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}