---
title: "Hands On Exercise 2: Thematic Mapping and GeoVisualisation with R"
author: "Kwee Cheng"
date: "August 24, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

##  **1.0 Overview**

Thematic mapping uses symbols on maps to visualize non-visible geographic properties like population, temperature, or crime rate. Geovisualization, however, graphically represents places, phenomena, or processes, engaging human spatial cognition and the eye-brain vision system for better understanding.

## **2.0 Getting Started**

[**tmap**](https://cran.r-project.org/web/packages/tmap/) is the main package used, but four other packages are also used

-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,

-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,

-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and

-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data.

 **readr**, **tidyr** and **dplyr** are part of **tidyverse** package.

## 2.1 Dataset

[Master Plan 2014 Subzone Boundary (Web)](https://beta.data.gov.sg/datasets?query=Master+Plan+2014+Subzone+Boundary+%28Web%29&resultId=d_d14da225fccf921049ab64238ff473d9)

[Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesextod2011to2020.ashx)

## 2.2 Importing the data into R

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

```{r}
mpsz <- st_read(dsn = "data/geospatial/MasterPlan", 
                layer = "MP14_SUBZONE_WEB_PL")
```

`mpsz` can be used to examine the contents

```{r}
mpsz
```

to import respopagsex2011to2020.csv file `read_csv` is used

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

## 2.3 **Data Preparation**

To prepare a thematic map with 2020 data, you first need to organize your data into a table with the following variables: PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY

-   YOUNG: age group 0 to 4 until age groyup 20 to 24,

-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,

-   AGED: age group 65 and above,

-   TOTAL: all age group, and

-   DEPENDENCY: the ratio between young and aged against economy active group

### 2.3.1 Data wrangling

These 2 will be used for data wrangling and transformation

-   *pivot_wider()* of **tidyr** package, and

-   *mutate()*, *filter()*, *group_by()* and *select()* of **dplyr** package

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

### 2.3.2 **Joining attribute and geospatial data**

Before performing the georelational join, the values in the **PA** and **SZ** fields need to be converted to uppercase. This step ensures consistency because the corresponding fields, **SUBZONE_N** and **PLN_AREA_N**, are already in uppercase. By converting **PA** and **SZ** to uppercase, you align the data formats, allowing the join operation to match values correctly across these fields.

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

Next, *left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

Save as rds file

```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

## 3.0 **Choropleth Mapping Geospatial Data Using *tmap***

Choropleth mapping uses area patterns or graduated colors to symbolize enumeration units, like countries or census units. For instance, a social scientist could use a choropleth map to show the spatial distribution of the aged population in Singapore by the Master Plan 2014 Subzone Boundary.

When using the **tmap** package in R, there are two approaches to create thematic maps:

1.  **Quick Thematic Mapping with `qtm()`**: This function allows for rapid creation of thematic maps with minimal code and default settings.

2.  **Customizable Thematic Mapping with tmap Elements**: This approach enables the creation of more detailed and customized maps by combining various tmap elements, offering greater flexibility in design and layout.

### 3.1 **Plotting a choropleth map quickly by using *qtm()***

**tmap `qtm()`** is the easiest and quickest way to draw a choropleth map. It provides a good default visualisation

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

-   *tmap_mode()* with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.

-   *fill* argument is used to map the attribute (i.e. DEPENDENCY)

### 3.2 **Creating a choropleth map by using *tmap*’s elements**

While **`qtm()`** is useful for quickly and easily creating a choropleth map, its drawback is that it limits control over the aesthetics of individual layers. To produce a high-quality cartographic choropleth map, it's better to use **tmap**'s drawing elements. This allows for precise control over the map's appearance, such as color schemes, legend placement, and more detailed customization, resulting in a polished and professional map.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

#### Drawing a base map

The basic building block of **tmap** is *tm_shape()* followed by one or more layer elemments such as *tm_fill()* and *tm_polygons()*.

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

*tm_shape()* is used to define the input data (i.e *mpsz_pop2020*) and *tm_polygons()* is used to draw the planning subzone polygons

#### Drawing a choropleth map using *tm_polygons()*

To draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as *Dependency* to *tm_polygons()*.

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

-   The default interval binning used to draw the choropleth map is called “pretty”.

-   The default colour scheme used is `YlOrRd` of ColorBrewer.

-   By default, Missing value will be shaded in grey.

#### Drawing a choropleth map using *tm_fill()* and \*tm_border()\*\*

Actually, *tm_polygons()* is a wraper of *tm_fill()* and *tm_border()*. *tm_fill()* shades the polygons by using the default colour scheme and *tm_borders()* adds the borders of the shapefile onto the choropleth map.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

`tm_borders` is used to add the boundary of the planning zones

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```

Additional arguments for `tm_borders()`

-   *col* = border colour,

-   *lwd* = border line width. The default is 1

-   *lty* = border line type. The default is “solid”

## 4.0  **Data classification methods of tmap**

Choropleth maps often use data classification methods to group large numbers of observations into meaningful ranges or classes

**tmap** provides ten data classification methods for this purpose:

-   **fixed**

-   **sd**

-   **equal**

-   **pretty**

-   **quantile**

-   **kmeans**

-   **hclust**

-   **bclust**

-   **fisher**

-   **jenks**

To define a data classification method, the *style* argument of *tm_fill()* or *tm_polygons()* will be used.

### 4.1 Plotting choropleth maps with built-in classification methods

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

*equal* data classification method

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

### 4.2 Plotting choropleth map with custome break

To override the default category breaks in **tmap**, use the **`breaks`** argument in **`tm_fill()`**. When setting breaks, include both the minimum and maximum values, so for **n** categories, **n+1** breakpoints must be provided. It’s recommended to first calculate descriptive statistics for the variable before setting the breakpoints. The code below shows how to compute and display descriptive statistics for the **DEPENDENCY** field.

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

using the reference, set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our *breaks* vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

## 5.0 **Colour Scheme**

**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package.

### 5.1 Using ColourBrewer palette

to change the color, assign it to `tm_fill()`

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
```

to reverse the color shading add a "-" prefix

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "-Blues") +
  tm_borders(alpha = 0.5)
```

### 5.2 **Map Layouts**

Map layout involves combining various elements to create a cohesive map. These elements include the mapped objects, title, scale bar, compass, margins, and aspect ratios. Color settings and data classification methods, such as palette and breakpoints, also influence the map's appearance.

#### 5.2.1 Map Legend

In **tmap**, several *legend* options are provided to change the placement, format and appearance of the legend.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

`tmap_style()` can be used to change the layout settings

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

Map furniture such as compass, scale bar and grid lines can also be drawn

*tm_compass()*, *tm_scale_bar()* and *tm_grid()* are used to add compass, scale bar and grid lines onto the choropleth map.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

to reset to the default style

```{r}
tmap_style("white")
```

### 5.3 **Drawing Small Multiple Choropleth Maps**

Small multiple maps, or facet maps, display several maps side-by-side or stacked to show how spatial relationships change with respect to another variable, like time.

In **tmap**, small multiple maps can be created in three ways:

1.  **Assigning multiple values** to at least one aesthetic argument.

2.  **Defining a group-by variable** using **`tm_facets()`**.

3.  **Creating multiple stand-alone maps** with **`tmap_arrange()`**.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

#### 5.3.1 By defining a group-by variable in *tm_facets()*

multiple small choropleth maps are created by using **tm_facets()**

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

#### 5.3.2 **Mappping Spatial Object Meeting a Selection Criterion**

Instead of creating small multiple choropleth map, selection function can be used to map spatial objects meeting the selection criterion.

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```
