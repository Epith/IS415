---
title: "Take-Home Exercise 1"
author: "Kwee Cheng"
date: "September 14, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
categories: [Take-Home, Code]
---

## Background

Millions of people have their lives shattered by armed conflict – wars – every year.

Armed conflict has been on the rise since about 2012, after a decline in the 1990s and early 2000s. First came conflicts in Libya, Syria and Yemen, triggered by the 2011 Arab uprisings. Libya’s instability spilled south, helping set off a protracted crisis in the Sahel region. A fresh wave of major combat followed: the 2020 Azerbaijani-Armenian war over the Nagorno-Karabakh enclave, horrific fighting in Ethiopia’s northern Tigray region that began weeks later, the conflict prompted by the Myanmar army’s 2021 power grab and Russia’s 2022 assault on Ukraine. Add to those 2023’s devastation in Sudan and Gaza. Around the globe, more people are dying in fighting, being forced from their homes or in need of life-saving aid than in decades.

## Objectives

Geospatial analytics hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply spatial point patterns analysis methods to discover the spatial and spatio-temporal distribution of armed conflict in Myanmar

## Dataset

Armed conflict data of Myanmar between 2021-2024 from [Armed Conflict Location & Event Data (ACLED)](https://acleddata.com/)

[Geospatial data](http://geonode.themimu.info/layers/?limit=100&offset=0) on [Myanmar Information Management Unit, MIMU](http://www.themimu.info/)

[OpenStreetMap](https://download.geofabrik.de/asia/myanmar.html) of Myanmar

## Packages

Most of the packages used are what is taught in class:

-   **sf (Simple Features)**: Provides tools for working with spatial vector data (points, lines, polygons) using simple features, a standardized way to store and process spatial data.

-   **raster**: Handles spatial raster data (grids, images, or maps) and allows reading, writing, manipulating, and analyzing raster datasets.

-   **spatstat**: Focuses on spatial point pattern analysis. It provides tools for analyzing and modeling the spatial distribution of points, like trees or crime locations.

-   **tmap**: A visualization package for thematic maps. It makes creating static and interactive maps using spatial data intuitive, supporting both raster and vector data.

-   **tidyverse**: A collection of packages designed for data manipulation, exploration, and visualization using a consistent syntax (e.g., **ggplot2**, **dplyr**, **tidyr**). It’s not specifically for spatial data but is often used in combination with spatial packages for data wrangling.

-   **sparr**: Used for kernel density estimation and analysis of spatial point patterns, particularly for risk estimation and spatio temporal analysis.

-   **sp**: Provides classes and methods for handling and analyzing spatial data in both vector and raster formats. It's the predecessor to **sf** and **raster**, widely used before **sf** became the preferred package for vector data

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse,sparr,sp)
```

## Import the Data

### Aspatial Data

First step would be to import the armed conflict data which is in csv format, *st_read* will be used to read the csv file. In addition we are creating an additional column quarter, since we would need to know which quarter does an entry belong to. Luckily for us we can easily use *quarter* function on the event_date to know which quarter it belongs to. This package is found in **lubridate** package which is loaded in together with **tidyverse**. Note we have converted the CRS to Myanmar's CRS at this point.

```{r}
acled_sf <- st_read("data/ACLED_Myanmar.csv") %>%
  st_as_sf(coords = c(
    "longitude", "latitude"),
    crs=4326) %>%
  st_transform(crs = 32647) %>%
  mutate(event_date = dmy(event_date),quarter = quarter(event_date))
```

Next I would like to split up the *acled_sf* into chucks for easier management of the data. I will split the data into chunks separating them by the different years 2021, 2022, 2023, 2024.

```{r}
acled_sf_2021 <- acled_sf %>%
  filter(year == 2021)

acled_sf_2022 <- acled_sf %>%
  filter(year == 2022)

acled_sf_2023 <- acled_sf %>%
  filter(year == 2023)

acled_sf_2024 <- acled_sf %>%
  filter(year == 2024)
```

### Spatial Data

Next is to import the boundary data of Myanmar, likewise *st_read* will be used. Note we have converted the CRS to Myanmars CRS at this point.

```{r}
myanmar_sf <- st_read(dsn="data/",layer = "mmr_polbnda2_adm1_250k_mimu_1") %>%
  st_transform(crs=32647)
```

```{r}
myanmar_sf
```

Looking at the data the only columns that seem interesting to me are *OBJECTID, ST, ST_RG* and *geometry,* so I will be only extracting those columns

```{r}
myanmar_sf <- myanmar_sf %>% select('OBJECTID', 'ST', 'ST_RG', 'geometry')
summary(myanmar_sf)
```

### **OpenStreetMap**

Next is to import the OpenStreetMap of Myanmar *st_read* is used again

```{r}
osm = st_read("data/myanmar_osm.shp.zip", layer="gis_osm_roads_free_1")
```

## Data Wrangling

### CRS check

First would be to check that *acled_sf* and *myanmar_sf* are in the correct projected system after crs transformation

```{r}
st_crs(acled_sf)
st_crs(acled_sf_2021)
st_crs(acled_sf_2022)
st_crs(acled_sf_2023)
st_crs(acled_sf_2024)
st_crs(myanmar_sf)
```

### OpenStreetMap

Working with OpenStreetMap is something different as there were no in class tutorials on this, and in a sense its not really traditional GIS data as its all store in one big database. First step is to see what fields there is.

```{r}
osm
```

The interesting fields to me are osm_id and fclass, in one of the fclass entries it says residential which could be useful in plotting and distinguish where the conflicts take place. Looking into [osm documentation](https://www.geofabrik.de/data/geofabrik-osm-gis-standard-0.3.pdf), osm_id might not be useful for me, but for fclass there are many features some of the examples below. So lets expand on the fclass.![](images/clipboard-1644116504.png)

![](images/clipboard-360332407.png)

![](images/clipboard-2041218185.png)

```{r}
unique(osm$fclass)
```

Due to the overwhelming size of the osm file and after reading the documentation I decided to keep a few of the interesting ones that could be helpful in my analysis

```{r}
roads <- c("primary", "secondary", "residential", "trunk_link", "primary_link", "tertiary", "footway", "trunk", "secondary_link", "tertiary_link")

osm <- osm[osm$fclass %in% roads, ]
```

```{r}
osm
```

Let's select only the useful columns that are interest of us, which is fclass, but let's keep osm_id in case it there is a use case for it despite it having duplicates

```{r}
osm <- osm %>% select('osm_id', 'fclass')
```

The number of features have been greatly reduced, also before forgetting let's transform osm CRS to Myanmars like for the previous 2 dataset

```{r}
osm <- st_transform(osm, crs = 32647)
```

```{r}
st_crs(osm)
```

```{r}
#| eval: false
merged_myanmar <- st_union(myanmar_sf)
osm_myanmar <- st_intersection(osm, merged_myanmar)
```

```{r}
#| eval: false
summary(osm_myanmar)
```

There are some geometry in osm that is saved as MULTILINESTRING which could caused problems with KDE calculation, so let's split it into individual LINESTRING

```{r}
#| eval: false
osm_myanmar <- st_cast(st_cast(osm_myanmar, "MULTILINESTRING"),"LINESTRING")
summary(osm_myanmar)
```

Let's save this data this data

```{r}
#| eval: false
write_rds(osm_myanmar, "data/rds/osm_myanmar.rds")
```

```{r}
#| echo: false
osm_myanmar <- read_rds("data/rds/osm_myanmar.rds")
```

### PPP object

Let's prepare to calculating the KDE by converting them into PPP objects

```{r}
acled_2021_Q1_ppp <- acled_sf_2021 %>% filter(quarter == 1) %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_2021_Q2_ppp <- acled_sf_2021 %>% filter(quarter == 2) %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_2021_Q3_ppp <- acled_sf_2021 %>% filter(quarter == 3) %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_2021_Q4_ppp <- acled_sf_2021 %>% filter(quarter == 4) %>% {as.ppp(st_coordinates(.),st_bbox(.))}

acled_2022_Q1_ppp <- acled_sf_2022 %>% filter(quarter == 1) %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_2022_Q2_ppp <- acled_sf_2022 %>% filter(quarter == 2) %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_2022_Q3_ppp <- acled_sf_2022 %>% filter(quarter == 3) %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_2022_Q4_ppp <- acled_sf_2022 %>% filter(quarter == 4) %>% {as.ppp(st_coordinates(.),st_bbox(.))}

acled_2023_Q1_ppp <- acled_sf_2023 %>% filter(quarter == 1) %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_2023_Q2_ppp <- acled_sf_2023 %>% filter(quarter == 2) %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_2023_Q3_ppp <- acled_sf_2023 %>% filter(quarter == 3) %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_2023_Q4_ppp <- acled_sf_2023 %>% filter(quarter == 4) %>% {as.ppp(st_coordinates(.),st_bbox(.))}

acled_2024_Q1_ppp <- acled_sf_2024 %>% filter(quarter == 1) %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_2024_Q2_ppp <- acled_sf_2024 %>% filter(quarter == 2) %>% {as.ppp(st_coordinates(.),st_bbox(.))}
```

It gives us warnings about duplicated points so let's remove them

```{r}
acled_2021_Q1_ppp <- rjitter(acled_2021_Q1_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_2021_Q2_ppp <- rjitter(acled_2021_Q2_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_2021_Q3_ppp <- rjitter(acled_2021_Q3_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_2021_Q4_ppp <- rjitter(acled_2021_Q4_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_2022_Q1_ppp <- rjitter(acled_2022_Q1_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_2022_Q2_ppp <- rjitter(acled_2022_Q2_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_2022_Q3_ppp <- rjitter(acled_2022_Q3_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_2022_Q4_ppp <- rjitter(acled_2022_Q4_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_2023_Q1_ppp <- rjitter(acled_2023_Q1_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_2023_Q2_ppp <- rjitter(acled_2023_Q2_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_2023_Q3_ppp <- rjitter(acled_2023_Q3_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_2023_Q4_ppp <- rjitter(acled_2023_Q4_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_2024_Q1_ppp <- rjitter(acled_2024_Q1_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_2024_Q2_ppp <- rjitter(acled_2024_Q2_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

Let's double check again to see if there are any duplicates

```{r}
any(duplicated(acled_2021_Q1_ppp))
any(duplicated(acled_2021_Q2_ppp))
any(duplicated(acled_2021_Q3_ppp))
any(duplicated(acled_2021_Q4_ppp))
any(duplicated(acled_2022_Q1_ppp))
any(duplicated(acled_2022_Q2_ppp))
any(duplicated(acled_2022_Q3_ppp))
any(duplicated(acled_2022_Q4_ppp))
any(duplicated(acled_2023_Q1_ppp))
any(duplicated(acled_2023_Q2_ppp))
any(duplicated(acled_2023_Q3_ppp))
any(duplicated(acled_2023_Q4_ppp))
any(duplicated(acled_2024_Q1_ppp))
any(duplicated(acled_2024_Q2_ppp))
```

Let's create an OWIN object of Myanmar

```{r}
myanmar_owin <- as.owin(myanmar_sf)
```

```{r}
plot(myanmar_owin)
```

Then let's extract the different conflict events into the Myanmar owin object

```{r}
acledMyanmar_ppp_2021_Q1 = acled_2021_Q1_ppp[myanmar_owin]
acledMyanmar_ppp_2021_Q2 = acled_2021_Q2_ppp[myanmar_owin]
acledMyanmar_ppp_2021_Q3 = acled_2021_Q3_ppp[myanmar_owin]
acledMyanmar_ppp_2021_Q4 = acled_2021_Q4_ppp[myanmar_owin]
acledMyanmar_ppp_2022_Q1 = acled_2022_Q1_ppp[myanmar_owin]
acledMyanmar_ppp_2022_Q2 = acled_2022_Q2_ppp[myanmar_owin]
acledMyanmar_ppp_2022_Q3 = acled_2022_Q3_ppp[myanmar_owin]
acledMyanmar_ppp_2022_Q4 = acled_2022_Q4_ppp[myanmar_owin]
acledMyanmar_ppp_2023_Q1 = acled_2023_Q1_ppp[myanmar_owin]
acledMyanmar_ppp_2023_Q2 = acled_2023_Q2_ppp[myanmar_owin]
acledMyanmar_ppp_2023_Q3 = acled_2023_Q3_ppp[myanmar_owin]
acledMyanmar_ppp_2023_Q4 = acled_2023_Q4_ppp[myanmar_owin]
acledMyanmar_ppp_2024_Q1 = acled_2024_Q1_ppp[myanmar_owin]
acledMyanmar_ppp_2024_Q2 = acled_2024_Q2_ppp[myanmar_owin]
```

Let's simply plot for this year 2024 to see what we have, not much can be seen on where most of the conflicts take place.

```{r}
plot(acledMyanmar_ppp_2024_Q1)
plot(acledMyanmar_ppp_2024_Q2)
```

## Quarterly KDE

Let's actually calculate the quarterly KDE for the different years now. First we would rescale the PPP into KM

```{r}
acledMyanmar_ppp_2021_Q1.km <- rescale.ppp(acledMyanmar_ppp_2021_Q1, 1000, "km")
acledMyanmar_ppp_2021_Q2.km <- rescale.ppp(acledMyanmar_ppp_2021_Q2, 1000, "km")
acledMyanmar_ppp_2021_Q3.km <- rescale.ppp(acledMyanmar_ppp_2021_Q3, 1000, "km")
acledMyanmar_ppp_2021_Q4.km <- rescale.ppp(acledMyanmar_ppp_2021_Q4, 1000, "km")
acledMyanmar_ppp_2022_Q1.km <- rescale.ppp(acledMyanmar_ppp_2022_Q1, 1000, "km")
acledMyanmar_ppp_2022_Q2.km <- rescale.ppp(acledMyanmar_ppp_2022_Q2, 1000, "km")
acledMyanmar_ppp_2022_Q3.km <- rescale.ppp(acledMyanmar_ppp_2022_Q3, 1000, "km")
acledMyanmar_ppp_2022_Q4.km <- rescale.ppp(acledMyanmar_ppp_2022_Q4, 1000, "km")
acledMyanmar_ppp_2023_Q1.km <- rescale.ppp(acledMyanmar_ppp_2023_Q1, 1000, "km")
acledMyanmar_ppp_2023_Q2.km <- rescale.ppp(acledMyanmar_ppp_2023_Q2, 1000, "km")
acledMyanmar_ppp_2023_Q3.km <- rescale.ppp(acledMyanmar_ppp_2023_Q3, 1000, "km")
acledMyanmar_ppp_2023_Q4.km <- rescale.ppp(acledMyanmar_ppp_2023_Q4, 1000, "km")
acledMyanmar_ppp_2024_Q1.km <- rescale.ppp(acledMyanmar_ppp_2024_Q1, 1000, "km")
acledMyanmar_ppp_2024_Q2.km <- rescale.ppp(acledMyanmar_ppp_2024_Q2, 1000, "km")
```

Now we can plot the KDE, lets do it for Q1 of 2021

```{r}
conflict.bw <- density(acledMyanmar_ppp_2021_Q1.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian")
plot(conflict.bw)
```

The map seems a bit dark, so I wanted to try other automatic sigma methods

::: panel-tabset
### bw.CvL

```{r}
conflict.bw <- density(acledMyanmar_ppp_2021_Q1.km, 
             sigma=bw.CvL, 
             edge=TRUE, 
             kernel="gaussian")
plot(conflict.bw)
```

### bw.ppl

```{r}
conflict.bw <- density(acledMyanmar_ppp_2021_Q1.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian")
plot(conflict.bw)
```

### bw.scott

```{r}
conflict.bw <- density(acledMyanmar_ppp_2021_Q1.km, 
             sigma=bw.scott, 
             edge=TRUE, 
             kernel="gaussian")
plot(conflict.bw)
```
:::

Let's try declaring our own sigma value

::: panel-tabset
### Sigma value 20

```{r}
conflict.bw <- density(acledMyanmar_ppp_2021_Q1.km, 
             sigma=20, 
             edge=TRUE, 
             kernel="gaussian")
plot(conflict.bw)
```

### Sigma Value 25

```{r}
conflict.bw <- density(acledMyanmar_ppp_2021_Q1.km, 
             sigma=25, 
             edge=TRUE, 
             kernel="gaussian")
plot(conflict.bw)
```

### Sigma Value 30

```{r}
conflict.bw <- density(acledMyanmar_ppp_2021_Q1.km, 
             sigma=30, 
             edge=TRUE, 
             kernel="gaussian")
plot(conflict.bw)
```
:::

Ultimately I think i will settle for sigma value of 25 and it seems to give the best results without over emphasizing the results.

Let's plot the quarterly KDE for the different years now

::: panel-tabset
### 2021

```{r}
#| fig-width: 20
#| fig-height: 18
par(mfrow=c(2,2), cex.main = 3.5)
plot(density(acledMyanmar_ppp_2021_Q1.km, 
             sigma=25, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2021 Q1")
plot(density(acledMyanmar_ppp_2021_Q2.km, 
             sigma=25, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2021 Q2")
plot(density(acledMyanmar_ppp_2021_Q3.km, 
             sigma=25, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2021 Q3")
plot(density(acledMyanmar_ppp_2021_Q4.km, 
             sigma=25, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2021 Q4")
```

### 2022

```{r}
#| fig-width: 20
#| fig-height: 18
par(mfrow=c(2,2), cex.main = 3.5)
plot(density(acledMyanmar_ppp_2022_Q1.km, 
             sigma=25, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2022 Q1")
plot(density(acledMyanmar_ppp_2022_Q2.km, 
             sigma=25, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2022 Q2")
plot(density(acledMyanmar_ppp_2022_Q3.km, 
             sigma=25, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2022 Q3")
plot(density(acledMyanmar_ppp_2022_Q4.km, 
             sigma=25, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2022 Q4")
```

### 2023

```{r}
#| fig-width: 20
#| fig-height: 18
par(mfrow=c(2,2), cex.main = 3.5)
plot(density(acledMyanmar_ppp_2023_Q1.km, 
             sigma=25, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2023 Q1")
plot(density(acledMyanmar_ppp_2023_Q2.km, 
             sigma=25, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2023 Q2")
plot(density(acledMyanmar_ppp_2023_Q3.km, 
             sigma=25, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2023 Q3")
plot(density(acledMyanmar_ppp_2023_Q4.km, 
             sigma=25, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2023 Q4")
```

### 2024

```{r}
#| fig-width: 20
#| fig-height: 18
par(mfrow=c(1,2), cex.main = 3.5)
plot(density(acledMyanmar_ppp_2024_Q1.km, 
             sigma=25, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2024 Q1")
plot(density(acledMyanmar_ppp_2024_Q2.km, 
             sigma=25, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2024 Q2")
```
:::

## **Second-order Spatial Point Patterns Analysis**

### Scoped down owin object

Based on the derived KDEs there is a lot of activities in the middle of Myanmar and according to <https://www.citypopulation.de/en/myanmar/cities/>

![](images/clipboard-2705191895.png)

Mandalay is one of the highest population so let's focus on it and it happens to be in our *myanmar_sf* boundary.

Let's filter to only get Madalay out of our *myanmar_sf*

```{r}
mandalay <- myanmar_sf %>%
  filter(ST == "Mandalay")
```

Let's create a owin object out of mandalay

```{r}
mandalay_owin = as.owin(mandalay)
```

```{r}
plot(mandalay_owin)
```

### PPP object

Before converting the *acled_sf* into a ppp object, I would like to split up the data further to focus on four main event types: battles, explosion/remote violence, strategic developments, violence against civilians. Also further splitting it by the different years. Because by not doing this and performing 2nd order analysis we don't know which are the events that are clustered or random dispersed. Also doing it for all the 4 years worth of data its bound to be clustered

```{r}
acled_ppp_battles_2021 <- acled_sf_2021 %>% filter(event_type == "Battles") %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_ppp_battles_2022 <- acled_sf_2022 %>% filter(event_type == "Battles") %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_ppp_battles_2023 <- acled_sf_2023 %>% filter(event_type == "Battles") %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_ppp_battles_2024 <- acled_sf_2024 %>% filter(event_type == "Battles") %>% {as.ppp(st_coordinates(.),st_bbox(.))}

acled_ppp_explosion_2021 <- acled_sf_2021 %>% filter(event_type == "Explosions/Remote violence") %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_ppp_explosion_2022 <- acled_sf_2022 %>% filter(event_type == "Explosions/Remote violence") %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_ppp_explosion_2023 <- acled_sf_2023 %>% filter(event_type == "Explosions/Remote violence") %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_ppp_explosion_2024 <- acled_sf_2024 %>% filter(event_type == "Explosions/Remote violence") %>% {as.ppp(st_coordinates(.),st_bbox(.))}

acled_ppp_strat_2021 <- acled_sf_2021 %>% filter(event_type == "Strategic developments") %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_ppp_strat_2022 <- acled_sf_2022 %>% filter(event_type == "Strategic developments") %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_ppp_strat_2023 <- acled_sf_2023 %>% filter(event_type == "Strategic developments") %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_ppp_strat_2024 <- acled_sf_2024 %>% filter(event_type == "Strategic developments") %>% {as.ppp(st_coordinates(.),st_bbox(.))}

acled_ppp_violence_2021 <- acled_sf_2021 %>% filter(event_type == "Violence against civilians") %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_ppp_violence_2022 <- acled_sf_2022 %>% filter(event_type == "Violence against civilians") %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_ppp_violence_2023 <- acled_sf_2023 %>% filter(event_type == "Violence against civilians") %>% {as.ppp(st_coordinates(.),st_bbox(.))}
acled_ppp_violence_2024 <- acled_sf_2024 %>% filter(event_type == "Violence against civilians") %>% {as.ppp(st_coordinates(.),st_bbox(.))}
```

Since it gives us warnings of duplicated data let's remove them

```{r}
acled_ppp_battles_2021 <- rjitter(acled_ppp_battles_2021, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_ppp_battles_2022 <- rjitter(acled_ppp_battles_2022, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_ppp_battles_2023 <- rjitter(acled_ppp_battles_2023, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_ppp_battles_2024 <- rjitter(acled_ppp_battles_2024, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)

acled_ppp_explosion_2021 <- rjitter(acled_ppp_explosion_2021, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_ppp_explosion_2022 <- rjitter(acled_ppp_explosion_2022, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_ppp_explosion_2023 <- rjitter(acled_ppp_explosion_2023, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_ppp_explosion_2024 <- rjitter(acled_ppp_explosion_2024, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)

acled_ppp_strat_2021 <- rjitter(acled_ppp_strat_2021, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_ppp_strat_2022 <- rjitter(acled_ppp_strat_2022, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_ppp_strat_2023 <- rjitter(acled_ppp_strat_2023, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_ppp_strat_2024 <- rjitter(acled_ppp_strat_2024, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)

acled_ppp_violence_2021 <- rjitter(acled_ppp_violence_2021, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_ppp_violence_2022 <- rjitter(acled_ppp_violence_2022, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_ppp_violence_2023 <- rjitter(acled_ppp_violence_2023, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
acled_ppp_violence_2024 <- rjitter(acled_ppp_violence_2024, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

```{r}
any(duplicated(acled_ppp_battles_2021))
any(duplicated(acled_ppp_battles_2022))
any(duplicated(acled_ppp_battles_2023))
any(duplicated(acled_ppp_battles_2024))

any(duplicated(acled_ppp_explosion_2021))
any(duplicated(acled_ppp_explosion_2022))
any(duplicated(acled_ppp_explosion_2023))
any(duplicated(acled_ppp_explosion_2024))

any(duplicated(acled_ppp_strat_2021))
any(duplicated(acled_ppp_strat_2022))
any(duplicated(acled_ppp_strat_2023))
any(duplicated(acled_ppp_strat_2024))

any(duplicated(acled_ppp_violence_2021))
any(duplicated(acled_ppp_violence_2022))
any(duplicated(acled_ppp_violence_2023))
any(duplicated(acled_ppp_violence_2024))
```

Great there's no more duplicates, next let's combine the ppp object by event types with the mandalay owin that we have created

```{r}
acledMyanmar_ppp_mandalay_battles_2021 = acled_ppp_battles_2021[mandalay_owin]
acledMyanmar_ppp_mandalay_battles_2022 = acled_ppp_battles_2022[mandalay_owin]
acledMyanmar_ppp_mandalay_battles_2023 = acled_ppp_battles_2023[mandalay_owin]
acledMyanmar_ppp_mandalay_battles_2024 = acled_ppp_battles_2024[mandalay_owin]


acledMyanmar_ppp_mandalay_explosion_2021 = acled_ppp_explosion_2021[mandalay_owin]
acledMyanmar_ppp_mandalay_explosion_2022 = acled_ppp_explosion_2022[mandalay_owin]
acledMyanmar_ppp_mandalay_explosion_2023 = acled_ppp_explosion_2023[mandalay_owin]
acledMyanmar_ppp_mandalay_explosion_2024 = acled_ppp_explosion_2024[mandalay_owin]

acledMyanmar_ppp_mandalay_strat_2021 = acled_ppp_strat_2021[mandalay_owin]
acledMyanmar_ppp_mandalay_strat_2022 = acled_ppp_strat_2022[mandalay_owin]
acledMyanmar_ppp_mandalay_strat_2023 = acled_ppp_strat_2023[mandalay_owin]
acledMyanmar_ppp_mandalay_strat_2024 = acled_ppp_strat_2024[mandalay_owin]

acledMyanmar_ppp_mandalay_violence_2021 = acled_ppp_violence_2021[mandalay_owin]
acledMyanmar_ppp_mandalay_violence_2022 = acled_ppp_violence_2021[mandalay_owin]
acledMyanmar_ppp_mandalay_violence_2023 = acled_ppp_violence_2021[mandalay_owin]
acledMyanmar_ppp_mandalay_violence_2024 = acled_ppp_violence_2021[mandalay_owin]
```

I will be using G function for my 2nd Order Analysis as it could help to determine clustering tendencies.

#### Battles

::: panel-tabset
### 2021

```{r}
G_battles_2021 = Gest(acledMyanmar_ppp_mandalay_battles_2021, correction = "border")
plot(G_battles_2021, xlim=c(0,500))
```

### 2022

```{r}
G_battles_2022 = Gest(acledMyanmar_ppp_mandalay_battles_2022, correction = "border")
plot(G_battles_2022, xlim=c(0,500))
```

### 2023

```{r}
G_battles_2023 = Gest(acledMyanmar_ppp_mandalay_battles_2023, correction = "border")
plot(G_battles_2023, xlim=c(0,500))
```

### 2024

```{r}
G_battles_2024 = Gest(acledMyanmar_ppp_mandalay_battles_2024, correction = "border")
plot(G_battles_2024, xlim=c(0,500))
```
:::

#### Explosion/Remote Violence

::: panel-tabset
### 2021

```{r}
G_explosion_2021 = Gest(acledMyanmar_ppp_mandalay_explosion_2021, correction = "border")
plot(G_explosion_2021, xlim=c(0,500))
```

### 2022

```{r}
G_explosion_2022 = Gest(acledMyanmar_ppp_mandalay_explosion_2022, correction = "border")
plot(G_explosion_2022, xlim=c(0,500))
```

### 2023

```{r}
G_explosion_2023 = Gest(acledMyanmar_ppp_mandalay_explosion_2023, correction = "border")
plot(G_explosion_2023, xlim=c(0,500))
```

### 2024

```{r}
G_explosion_2024 = Gest(acledMyanmar_ppp_mandalay_explosion_2024, correction = "border")
plot(G_explosion_2024, xlim=c(0,500))
```
:::

#### Strategic Developments

::: panel-tabset
### 2021

```{r}
G_strat_2021 = Gest(acledMyanmar_ppp_mandalay_strat_2021, correction = "border")
plot(G_strat_2021, xlim=c(0,500))
```

### 2022

```{r}
G_strat_2022 = Gest(acledMyanmar_ppp_mandalay_strat_2022, correction = "border")
plot(G_strat_2022, xlim=c(0,500))
```

### 2023

```{r}
G_strat_2023 = Gest(acledMyanmar_ppp_mandalay_strat_2023, correction = "border")
plot(G_strat_2023, xlim=c(0,500))
```

### 2024

```{r}
G_strat_2024 = Gest(acledMyanmar_ppp_mandalay_strat_2024, correction = "border")
plot(G_strat_2024, xlim=c(0,500))
```
:::

#### Violence against civilians

::: panel-tabset
### 2021

```{r}
G_violence_2021 = Gest(acledMyanmar_ppp_mandalay_violence_2021, correction = "border")
plot(G_violence_2021, xlim=c(0,500))
```

### 2022

```{r}
G_violence_2022 = Gest(acledMyanmar_ppp_mandalay_violence_2022, correction = "border")
plot(G_violence_2022, xlim=c(0,500))
```

### 2023

```{r}
G_violence_2023 = Gest(acledMyanmar_ppp_mandalay_violence_2023, correction = "border")
plot(G_violence_2023, xlim=c(0,500))
```

### 2024

```{r}
G_violence_2024 = Gest(acledMyanmar_ppp_mandalay_violence_2024, correction = "border")
plot(G_violence_2024, xlim=c(0,500))
```
:::

### Performing Complete Spatial Randomness Test

To see if the the different event types are cluster or randomly dispersed. The hypothesis and test are as follows:

Ho = The distribution of a certain event at Mandalay region are randomly distributed.

H1 = The distribution of a certain event at Mandalay region are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

#### Battles

::: panel-tabset
### 2021

```{r}
G_battles_2021.csr <- envelope(acledMyanmar_ppp_mandalay_battles_2021, Gest, nsim = 999)
plot(G_battles_2021.csr)
```

### 2022

```{r}
G_battles_2022.csr <- envelope(acledMyanmar_ppp_mandalay_battles_2022, Gest, nsim = 999)
plot(G_battles_2022.csr)
```

### 2023

```{r}
G_battles_2023.csr <- envelope(acledMyanmar_ppp_mandalay_battles_2023, Gest, nsim = 999)
plot(G_battles_2023.csr)
```

### 2024

```{r}
G_battles_2024.csr <- envelope(acledMyanmar_ppp_mandalay_battles_2024, Gest, nsim = 999)
plot(G_battles_2024.csr)
```
:::

For 2021 and 2022, the points are generally clustered however towards the end there are signs to show that there are some homogeneous distribution with it being in the envelope. For the year 2023 and 2024 it is generally clustered as it falls above the envelope however for 2024 there some points of homogeneous distribution due to it falling inside the envelope.

#### Explosion/Remote violence

::: panel-tabset
### 2021

```{r}
G_explosion_2021.csr <- envelope(acledMyanmar_ppp_mandalay_explosion_2021, Gest, nsim = 999)
plot(G_explosion_2021.csr)
```

### 2022

```{r}
G_explosion_2022.csr <- envelope(acledMyanmar_ppp_mandalay_explosion_2022, Gest, nsim = 999)
plot(G_explosion_2022.csr)
```

### 2023

```{r}
G_explosion_2023.csr <- envelope(acledMyanmar_ppp_mandalay_explosion_2023, Gest, nsim = 999)
plot(G_explosion_2023.csr)
```

### 2024

```{r}
G_explosion_2024.csr <- envelope(acledMyanmar_ppp_mandalay_explosion_2024, Gest, nsim = 999)
plot(G_explosion_2024.csr)
```
:::

For 2021-2023 it is generally clustered as it fals above the envelope however for 2024 there were some signs of homogeneous distribution where it falls within the envelope however it is still a clustered distribution

#### Strategic Developments

::: panel-tabset
### 2021

```{r}
G_strat_2021.csr <- envelope(acledMyanmar_ppp_mandalay_strat_2021, Gest, nsim = 999)
plot(G_strat_2021.csr)
```

### 2022

```{r}
G_strat_2022.csr <- envelope(acledMyanmar_ppp_mandalay_strat_2022, Gest, nsim = 999)
plot(G_strat_2022.csr)
```

### 2023

```{r}
G_strat_2023.csr <- envelope(acledMyanmar_ppp_mandalay_strat_2023, Gest, nsim = 999)
plot(G_strat_2023.csr)
```

### 2024

```{r}
G_strat_2024.csr <- envelope(acledMyanmar_ppp_mandalay_strat_2024, Gest, nsim = 999)
plot(G_strat_2024.csr)
```
:::

For all the years it is generally a clustered distribution due to it being above the envelope

#### Violence against civilians

::: panel-tabset
### 2021

```{r}
G_violence_2021.csr <- envelope(acledMyanmar_ppp_mandalay_violence_2021, Gest, nsim = 999)
plot(G_violence_2021.csr)
```

### 2022

```{r}
G_violence_2022.csr <- envelope(acledMyanmar_ppp_mandalay_violence_2022, Gest, nsim = 999)
plot(G_violence_2022.csr)
```

### 2023

```{r}
G_violence_2023.csr <- envelope(acledMyanmar_ppp_mandalay_violence_2023, Gest, nsim = 999)
plot(G_violence_2023.csr)
```

### 2024

```{r}
G_violence_2024.csr <- envelope(acledMyanmar_ppp_mandalay_violence_2024, Gest, nsim = 999)
plot(G_violence_2024.csr)
```
:::

For all the years it is generally a clustered distribution due to it being above the envelope

## KDE on OpenStreetMap

From the various testing, I realised that we can't use the rescale version of the ppp object as their unit of measurement is different so the raster layer and osm can't be overlay

With that let's start plotting the different maps, because we are using the meters version we would have to adjust the sigma to reflect it better

::: panel-tabset
### 2021

```{r}
#| fig-width: 20
#| fig-height: 18
par(mfrow=c(2,2), cex.main = 3.5)
map_density <- density(acledMyanmar_ppp_2021_Q1, 
             sigma=25000, 
             edge=TRUE, 
             kernel="gaussian")
density_raster <- raster(map_density)
projection(density_raster) <- CRS("+init=EPSG:32647")

m1 <- tm_shape(density_raster) +
  tm_raster() +
  tm_shape(osm_myanmar) +
  tm_lines("black")

map_density <- density(acledMyanmar_ppp_2021_Q2, 
             sigma=25000, 
             edge=TRUE, 
             kernel="gaussian")
density_raster <- raster(map_density)
projection(density_raster) <- CRS("+init=EPSG:32647")

m2 <- tm_shape(density_raster) +
  tm_raster() +
  tm_shape(osm_myanmar) +
  tm_lines("black")

map_density <- density(acledMyanmar_ppp_2021_Q3, 
             sigma=25000, 
             edge=TRUE, 
             kernel="gaussian")
density_raster <- raster(map_density)
projection(density_raster) <- CRS("+init=EPSG:32647")

m3 <- tm_shape(density_raster) +
  tm_raster() +
  tm_shape(osm_myanmar) +
  tm_lines("black")

map_density <- density(acledMyanmar_ppp_2021_Q4, 
             sigma=25000, 
             edge=TRUE, 
             kernel="gaussian")
density_raster <- raster(map_density)
projection(density_raster) <- CRS("+init=EPSG:32647")

m4 <- tm_shape(density_raster) +
  tm_raster() +
  tm_shape(osm_myanmar) +
  tm_lines("black")

tmap_arrange(m1, m2, m3, m4, asp=1, ncol=2, nrow=2)
```

### 2022

```{r}
#| fig-width: 20
#| fig-height: 18
par(mfrow=c(2,2), cex.main = 3.5)
map_density <- density(acledMyanmar_ppp_2022_Q1, 
             sigma=25000, 
             edge=TRUE, 
             kernel="gaussian")
density_raster <- raster(map_density)
projection(density_raster) <- CRS("+init=EPSG:32647")

m1 <- tm_shape(density_raster) +
  tm_raster() +
  tm_shape(osm_myanmar) +
  tm_lines("black")

map_density <- density(acledMyanmar_ppp_2022_Q2, 
             sigma=25000, 
             edge=TRUE, 
             kernel="gaussian")
density_raster <- raster(map_density)
projection(density_raster) <- CRS("+init=EPSG:32647")

m2 <- tm_shape(density_raster) +
  tm_raster() +
  tm_shape(osm_myanmar) +
  tm_lines("black")

map_density <- density(acledMyanmar_ppp_2022_Q3, 
             sigma=25000, 
             edge=TRUE, 
             kernel="gaussian")
density_raster <- raster(map_density)
projection(density_raster) <- CRS("+init=EPSG:32647")

m3 <- tm_shape(density_raster) +
  tm_raster() +
  tm_shape(osm_myanmar) +
  tm_lines("black")

map_density <- density(acledMyanmar_ppp_2022_Q4, 
             sigma=25000, 
             edge=TRUE, 
             kernel="gaussian")
density_raster <- raster(map_density)
projection(density_raster) <- CRS("+init=EPSG:32647")

m4 <- tm_shape(density_raster) +
  tm_raster() +
  tm_shape(osm_myanmar) +
  tm_lines("black")

tmap_arrange(m1, m2, m3, m4, asp=1, ncol=2, nrow=2)
```

### 2023

```{r}
#| fig-width: 20
#| fig-height: 18
par(mfrow=c(2,2), cex.main = 3.5)
map_density <- density(acledMyanmar_ppp_2023_Q1, 
             sigma=25000, 
             edge=TRUE, 
             kernel="gaussian")
density_raster <- raster(map_density)
projection(density_raster) <- CRS("+init=EPSG:32647")

m1 <- tm_shape(density_raster) +
  tm_raster() +
  tm_shape(osm_myanmar) +
  tm_lines("black")

map_density <- density(acledMyanmar_ppp_2023_Q2, 
             sigma=25000, 
             edge=TRUE, 
             kernel="gaussian")
density_raster <- raster(map_density)
projection(density_raster) <- CRS("+init=EPSG:32647")

m2 <- tm_shape(density_raster) +
  tm_raster() +
  tm_shape(osm_myanmar) +
  tm_lines("black")

map_density <- density(acledMyanmar_ppp_2023_Q3, 
             sigma=25000, 
             edge=TRUE, 
             kernel="gaussian")
density_raster <- raster(map_density)
projection(density_raster) <- CRS("+init=EPSG:32647")

m3 <- tm_shape(density_raster) +
  tm_raster() +
  tm_shape(osm_myanmar) +
  tm_lines("black")

map_density <- density(acledMyanmar_ppp_2023_Q4, 
             sigma=25000, 
             edge=TRUE, 
             kernel="gaussian")
density_raster <- raster(map_density)
projection(density_raster) <- CRS("+init=EPSG:32647")

m4 <- tm_shape(density_raster) +
  tm_raster() +
  tm_shape(osm_myanmar) +
  tm_lines("black")

tmap_arrange(m1, m2, m3, m4, asp=1, ncol=2, nrow=2)
```

### 2024

```{r}
#| fig-width: 20
#| fig-height: 18
par(mfrow=c(2,2), cex.main = 3.5)
map_density <- density(acledMyanmar_ppp_2024_Q1, 
             sigma=25000, 
             edge=TRUE, 
             kernel="gaussian")
density_raster <- raster(map_density)
projection(density_raster) <- CRS("+init=EPSG:32647")

m1 <- tm_shape(density_raster) +
  tm_raster() +
  tm_shape(osm_myanmar) +
  tm_lines("black")

map_density <- density(acledMyanmar_ppp_2024_Q2, 
             sigma=25000, 
             edge=TRUE, 
             kernel="gaussian")
density_raster <- raster(map_density)
projection(density_raster) <- CRS("+init=EPSG:32647")

m2 <- tm_shape(density_raster) +
  tm_raster() +
  tm_shape(osm_myanmar) +
  tm_lines("black")

tmap_arrange(m1, m2, asp=1, ncol=2)
```
:::

## KDE insights

A lot of the conflicts that seems to be happening is around the central area of Myanmar and along the outskirts. Some explanations for activities around the central of Myanmar is that the capital city is there, and one of the biggest region in population Madalay is there. As for the outskirt events it could be due to it being the region with the highest population. Interestingly, for the year 2021 there wasn't much conflicts in the first 2 quarters but it slowly got more. Transitioning into 2022 and 2023 where it seems to be the peak of when a lot of conflicts seems to be happening. With the data given as of now for 2024, the amount of conflicts for the Q2 is lesser than Q1.

## **Computing STKDE by quarters**

For computing STKDE let's split the *acled_sf* data that I have split by the years and selecting the quarter column, as we don't the other other unwanted fields and only the mark field

```{r}
conflict_quarter_2021 <- acled_sf_2021 %>% 
  select(quarter)

conflict_quarter_2022 <- acled_sf_2022 %>% 
  select(quarter)

conflict_quarter_2023 <- acled_sf_2023 %>% 
  select(quarter)

conflict_quarter_2024 <- acled_sf_2024 %>% 
  select(quarter)
```

### PPP object

Next is to convert the different simple frames into ppp objects

```{r}
conflict_quarter_ppp_2021 <- as.ppp(conflict_quarter_2021)

conflict_quarter_ppp_2022 <- as.ppp(conflict_quarter_2022)

conflict_quarter_ppp_2023 <- as.ppp(conflict_quarter_2023)

conflict_quarter_ppp_2024 <- as.ppp(conflict_quarter_2024)
```

Let's check for any duplicates in the data

```{r}
any(duplicated(conflict_quarter_ppp_2021))
any(duplicated(conflict_quarter_ppp_2022))
any(duplicated(conflict_quarter_ppp_2023))
any(duplicated(conflict_quarter_ppp_2024))
```

Since there are duplicates let's perform jitter to remove them

```{r}
conflict_quarter_ppp_2021 <- rjitter(conflict_quarter_ppp_2021, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)

conflict_quarter_ppp_2022 <- rjitter(conflict_quarter_ppp_2022, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)

conflict_quarter_ppp_2023 <- rjitter(conflict_quarter_ppp_2023, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)

conflict_quarter_ppp_2024 <- rjitter(conflict_quarter_ppp_2024, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

Checking for duplicates again

```{r}
any(duplicated(conflict_quarter_ppp_2021))
any(duplicated(conflict_quarter_ppp_2022))
any(duplicated(conflict_quarter_ppp_2023))
any(duplicated(conflict_quarter_ppp_2024))
```

Great now that there are no duplicates let's combine the *myanmar_owin* we created earlier from earlier section with the newly created ppp objects

```{r}
conflict_quarter_owin_2021 <- conflict_quarter_ppp_2021[myanmar_owin]

conflict_quarter_owin_2022 <- conflict_quarter_ppp_2022[myanmar_owin]

conflict_quarter_owin_2023 <- conflict_quarter_ppp_2023[myanmar_owin]

conflict_quarter_owin_2024 <- conflict_quarter_ppp_2024[myanmar_owin]

```

Let's plot it out to see the correctness of the data

```{r}
plot(conflict_quarter_owin_2021)
plot(conflict_quarter_owin_2022)
plot(conflict_quarter_owin_2023)
plot(conflict_quarter_owin_2024)
```

### STKDE

Now to actually compute the STKDE as from the previous plot everything is looking, we will be using *spattemp.density*

::: panel-tabset
### 2021

```{r}
conflict_kde_2021 <- spattemp.density(conflict_quarter_owin_2021)
summary(conflict_kde_2021)
```

### 2022

```{r}
conflict_kde_2022 <- spattemp.density(conflict_quarter_owin_2022)
summary(conflict_kde_2022)
```

### 2023

```{r}
conflict_kde_2023 <- spattemp.density(conflict_quarter_owin_2023)
summary(conflict_kde_2023)
```

### 2024

```{r}
conflict_kde_2024 <- spattemp.density(conflict_quarter_owin_2024)
summary(conflict_kde_2024)
```
:::

Now let's plot the graphs for the computed STKDE

::: panel-tabset
### 2021

```{r}
tims <- c(1,2,3,4)

par(mfrow=c(1,4), cex.main = 1.5)
for(i in tims){
  plot(conflict_kde_2021, i, 
       fix.range=TRUE,
       override.par=FALSE,
       main=paste("STKDE Q",i))
}
```

### 2022

```{r}
par(mfrow=c(1,4), cex.main = 1.5)
for(i in tims){
  plot(conflict_kde_2022, i, 
       override.par=FALSE, 
       fix.range=TRUE, 
       main=paste("STKDE Q",i))
}
```

### 2023

```{r}
par(mfrow=c(1,4),cex.main = 1.5)

for(i in tims){
  plot(conflict_kde_2023, i, 
       override.par=FALSE, 
       fix.range=TRUE, 
       main=paste("STKDE Q",i))
}
```

### 2024

```{r}
tims_2 <- c(1,2)

par(mfrow=c(1,2), cex.main = 1.2)
for(i in tims_2){
  plot(conflict_kde_2024, i, 
       override.par=FALSE, 
       fix.range=TRUE,
       main=paste("STKDE Q",i))
}
```
:::

## **2nd Order Analysis STKDE**

There not much tutorial in class for performing 2nd order analysis for STKDE, so the closest that prof has provided us is <https://pages.charlotte.edu/eric-delmelle/wp-content/uploads/sites/150/2019/09/Spatiotemporal-Point-Pattern-Analysis-Using-Ripleys-K-Function.pdf> which is to use Ripleys K function for 2nd order analysis which would be what I'm doing.

Likewise for what we did in 2nd order analysis for KDE let's split up the data into the *years* and *event_type*. I shall only focus on Mandalay region and for the year 2024. Since from the STKDE it has difference from the KDE. Also as with K function it is already computationally intensive and our dataset is huge, its better to narrow it down.

Let's first split acled\_*sf_2024* into the four main *event_type* again and only selecting the quarter.

```{r}
acled_stkde_2024_battle <- acled_sf_2024 %>% filter(event_type == "Battles") %>% select(quarter)
acled_stkde_2024_explosion <- acled_sf_2024 %>% filter(event_type == "Explosions/Remote violence") %>% select(quarter)
acled_stkde_2024_strat <- acled_sf_2024 %>% filter(event_type == "Strategic developments")%>% select(quarter)
acled_stkde_2024_violence <- acled_sf_2024 %>% filter(event_type == "Violence against civilians") %>% select(quarter)
```

### PPP object

Let's convert into ppp object

```{r}
stkde_ppp_battle <- as.ppp(acled_stkde_2024_battle)
stkde_ppp_explosion <- as.ppp(acled_stkde_2024_explosion)
stkde_ppp_strat <- as.ppp(acled_stkde_2024_strat)
stkde_ppp_violence <- as.ppp(acled_stkde_2024_violence)
```

Let's check for duplicates

```{r}
any(duplicated(stkde_ppp_battle))
any(duplicated(stkde_ppp_explosion))
any(duplicated(stkde_ppp_strat))
any(duplicated(stkde_ppp_violence))
```

Let's remove the duplicates

```{r}
stkde_ppp_battle <- rjitter(stkde_ppp_battle, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
stkde_ppp_explosion <- rjitter(stkde_ppp_explosion, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
stkde_ppp_strat <- rjitter(stkde_ppp_strat, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
stkde_ppp_violence <- rjitter(stkde_ppp_violence, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

Making sure that there are no more duplicates

```{r}
any(duplicated(stkde_ppp_battle))
any(duplicated(stkde_ppp_explosion))
any(duplicated(stkde_ppp_strat))
any(duplicated(stkde_ppp_violence))
```

Let's finally combine it with the mandalay owin object

```{r}
stkde_owin_battle <- stkde_ppp_battle[mandalay_owin]
stkde_owin_explosion <- stkde_ppp_explosion[mandalay_owin]
stkde_owin_strat <- stkde_ppp_strat[mandalay_owin]
stkde_owin_violence <- stkde_ppp_violence[mandalay_owin]
```

::: panel-tabset
### Battle

```{r}
K_battle = Kest(stkde_owin_battle, correction = "Ripley")
plot(K_battle, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

### Explosion/Remote violence

```{r}
K_explosion = Kest(stkde_owin_explosion, correction = "Ripley")
plot(K_explosion, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

### Strategic Development

```{r}
K_Strat = Kest(stkde_owin_strat, correction = "Ripley")
plot(K_Strat, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

### Violence against civilians

```{r}
K_violence = Kest(stkde_owin_violence, correction = "Ripley")
plot(K_violence, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```
:::

Then let's run the CSR simulation and plot it. If its

-   Above the envelop: significant cluster pattern

-   Below the envelop: significant regular

-   Inside the envelop: CSR

::: panel-tabset
### Battles

```{r}
K_battle.csr <- envelope(stkde_owin_battle, Kest, nsim = 99, rank = 1, glocal=TRUE)
plot(K_battle.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

### Explosion/Remote violence

```{r}
K_explosion.csr <- envelope(stkde_owin_explosion, Kest, nsim = 99, rank = 1, glocal=TRUE)
plot(K_explosion.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

### Strategic Development

```{r}
K_Strat.csr <- envelope(stkde_owin_strat, Kest, nsim = 99, rank = 1, glocal=TRUE)
plot(K_Strat.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

### Violence against civilians

```{r}
K_violence.csr <- envelope(stkde_owin_violence, Kest, nsim = 99, rank = 1, glocal=TRUE)
plot(K_violence.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```
:::

Likewise it does show that the conflicts in 2024 are all generally clustered as it is above the envelope

## STKDE Insights

Intuitively you will think that KDE and STKDE would give the same results cause at the end of the day we are using the same data points. However something STKDE have an advantage is that it takes over a period of time as a consideration.

For the most part STKDE show similar insights in that the conflicts happen in the middle of Myanmar and the outskirts. But something different would be the intensity of the density, as with KDE we changed our own sigma to make it more visible which could explain the difference. Our STKDE has lower intensity for some of the years for example 2023 Q3, which suggest that there is not much conflict clustering as we initially thought. Another one would be 2024 Q2, our KDE suggest that there isn't much conflicts as the intensity of the density is quite low generally around the whole of Myanmar. But our STKDE suggest that for 2024 Q2 there is a lot of conflicts on the central and outskirts of Myanmar, again this could be due to it factoring a period of time into the computation.

Overall both KDE and STKDE, shows that there are conflicts around the central of Myanmar and for the outskirts its generally the South of Myanmar. And currently in the year 2024 its correlating to the Rakhine State where the Arakan Army insurgency took place earlier this year and is still ongoing.

## STKDE on OpenStreetMap
